syntax = "proto3";

package abbapb;

option go_package = "github.com/filecoin-project/mir/pkg/pb/abbapb";

import "mir/codegen_extensions.proto";
import "net/codegen_extensions.proto";


// ============================================================
// Events
// ============================================================

message RoundEvent {
  option (mir.event) = true;
  option (mir.event_class) = true;

  oneof type {
    option (mir.event_type) = true;

    RoundInputValue input_value = 1;
    RoundContinue   continue    = 2;
    RoundDeliver    deliver     = 3;
    RoundFinishAll  finish      = 4;
  }
}

message RoundInputValue {
  option (mir.event) = true;

  bool input = 1;
}

message RoundContinue {
  // first round will not go beyond processing INPUT until this event is received.
  option (mir.event) = true;
}

message RoundDeliver {
  option (mir.event) = true;

  bool   next_estimate = 1;
  uint64 round_number  = 2;

  int64 duration_no_coin = 3 [(mir.type) = "time.Duration"];
}

message RoundFinishAll {
  option (mir.event) = true;

  bool decision = 1;
  bool unanimous = 2; // TODO: split into different message? probably not worth the hassle
}

// ============================================================
// Messages
// ============================================================

message RoundMessage {
  option (net.message_class) = true;

  oneof type {
    option (net.message_type) = true;

    RoundInputMessage input = 1;
    RoundInitMessage  init  = 2;
    RoundAuxMessage   aux   = 3;
    RoundConfMessage  conf  = 4;
    RoundCoinMessage  coin  = 5;
  }
}

message RoundInputMessage {
  option (net.message) = true;

  bool estimate = 1;
}

message RoundInitMessage {
  option (net.message) = true;

  bool estimate = 1;
}

message RoundAuxMessage {
  option (net.message) = true;

  bool value = 1;
}

message RoundConfMessage {
  option (net.message) = true;

  uint32 values = 1 [(mir.type) = "github.com/filecoin-project/mir/pkg/abba/abbatypes.ValueSet"];
}

message RoundCoinMessage {
  option (net.message) = true;

  bytes coin_share = 1 [(mir.type) = "github.com/filecoin-project/mir/pkg/threshcrypto/tctypes.SigShare"];
}
