syntax = "proto3";

package abbapb;

option go_package = "github.com/filecoin-project/mir/pkg/pb/abbapb";

import "dslpb/dslpb.proto";
import "contextstorepb/contextstorepb.proto";

import "mir/codegen_extensions.proto";
import "net/codegen_extensions.proto";


// ============================================================
// Events
// ============================================================

message RoundEvent {
  option (mir.event) = true;
  option (mir.event_class) = true;

  oneof type {
    option (mir.event_type) = true;

    RoundInputValue input_value = 1;
    RoundDeliver    deliver     = 2;
    RoundFinishAll  finish      = 3;
  }
}

message RoundInputValue {
  option (mir.event) = true;

  bool        input  = 1;
  RoundOrigin origin = 2 [(mir.origin_request) = true];
}

message RoundDeliver {
  option (mir.event) = true;

  bool        next_estimate = 1;
  RoundOrigin origin        = 2 [(mir.origin_response) = true];
}

message RoundFinishAll {
  option (mir.event) = true;

  bool decision = 1;
}

// ============================================================
// Messages
// ============================================================

message RoundMessage {
  option (net.message_class) = true;

  oneof type {
    option (net.message_type) = true;

    RoundInitMessage init = 1;
    RoundAuxMessage  aux  = 2;
    RoundConfMessage conf = 3;
    RoundCoinMessage coin = 4;
  }
}

message RoundInitMessage {
  option (net.message) = true;

  bool estimate = 1;
}

message RoundAuxMessage {
  option (net.message) = true;

  bool value = 1;
}

message RoundConfMessage {
  option (net.message) = true;

  uint32 values = 1 [(mir.type) = "github.com/filecoin-project/mir/pkg/abba/abbatypes.ValueSet"];
}

message RoundCoinMessage {
  option (net.message) = true;

  bytes coin_share = 1 [(mir.type) = "github.com/filecoin-project/mir/pkg/threshcrypto/tctypes.SigShare"];
}

// ============================================================
// Data structures
// ============================================================

message RoundOrigin {
  option (mir.struct) = true;

  string module = 1 [(mir.type) = "github.com/filecoin-project/mir/pkg/types.ModuleID"];
  oneof Type {
    contextstorepb.Origin context_store = 2;
    dslpb.Origin          dsl           = 3;
  }
}
