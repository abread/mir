syntax = "proto3";

package aleapb.bcpb;

option go_package = "github.com/filecoin-project/mir/pkg/pb/aleapb/bcpb";

import "trantorpb/trantorpb.proto";

import "mir/codegen_extensions.proto";
import "net/codegen_extensions.proto";

// ============================================================
// Events
// ============================================================

message Event {
  option (mir.event_class) = true;

  oneof type {
    option (mir.event_type) = true;

    RequestCert      request_cert    = 1;
    DeliverCert      deliver_cert    = 2;
    BcStarted        bc_started      = 3;
    FreeSlot         free_slot       = 4;
    EstimateUpdate estimate_update = 5;
    DoFillGap        fill_gap        = 6;
  }
}

message RequestCert {
  option (mir.event) = true;

  // This is a separate event from availabilitypb's to avoid the unused origin parameter
  // Alea's certificates are generated on demand for local transactions, and by external node's broadcasts
}

message DeliverCert {
  option (mir.event) = true;

  // This is a separate event from availabilitypb's to avoid the unused origin parameter
  // Alea's certificates are generated on demand for local transactions, and by external node's broadcasts
  Cert cert = 1;
}

message BcStarted {
  option (mir.event) = true;

  Slot slot = 1;
}

message FreeSlot {
  option (mir.event) = true;

  Slot slot = 1;
}

message EstimateUpdate {
  option (mir.event) = true;

  // estimated worst-case duration for broadcasts of local transactions, accounting for time for remote
  // nodes to receive the final message and verify it.
  int64 maxOwnBcDuration = 1 [(mir.type) = "time.Duration"];

  // estimated worst-case duration for broadcasts of local transactions, excluding time for remote
  // nodes to receive the final message and verify it.
  int64 maxOwnBcLocalDuration = 3 [(mir.type) = "time.Duration"];

  // estimated worst-case duration for incoming transactions from remote nodes
  int64 maxExtBcDuration = 2 [(mir.type) = "time.Duration"];
}

message DoFillGap {
  option (mir.event) = true;

  Slot slot = 1;
}

// ============================================================
// Messages
// ============================================================

message Message {
  option (net.message_class) = true;

  oneof type {
    option (net.message_type) = true;

    FillGapMessage fill_gap_message = 1;
    FillerMessage  filler_message   = 2;
  }
}

message FillGapMessage {
  option (net.message) = true;

  Slot slot = 1;
}

message FillerMessage {
  option (net.message) = true;

  Cert                           cert = 1;
  repeated trantorpb.Transaction txs  = 2;
}

// ============================================================
// Structs
// ============================================================

message Slot {
  option (mir.struct) = true;

  uint32 queue_idx  = 1 [(mir.type) = "github.com/filecoin-project/mir/pkg/alea/aleatypes.QueueIdx"];
  uint64 queue_slot = 2 [(mir.type) = "github.com/filecoin-project/mir/pkg/alea/aleatypes.QueueSlot"];
}

// Availability certificate
message Cert {
  option (mir.struct) = true;

  Slot   slot      = 1;
  string batch_id  = 2;
  bytes  signature = 3 [(mir.type) = "github.com/filecoin-project/mir/pkg/threshcrypto/tctypes.FullSig"];
}
