//
//Copyright IBM Corp. All Rights Reserved.
//
//SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: transactionreceiver/transactionreceiver.proto

package transactionreceiver

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"

	trantorpb "github.com/filecoin-project/mir/pkg/pb/trantorpb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TransactionReceiver_Listen_FullMethodName = "/receiver.TransactionReceiver/Listen"
	TransactionReceiver_Output_FullMethodName = "/receiver.TransactionReceiver/Output"
)

// TransactionReceiverClient is the client API for TransactionReceiver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionReceiverClient interface {
	Listen(ctx context.Context, opts ...grpc.CallOption) (TransactionReceiver_ListenClient, error)
	Output(ctx context.Context, in *Empty, opts ...grpc.CallOption) (TransactionReceiver_OutputClient, error)
}

type transactionReceiverClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionReceiverClient(cc grpc.ClientConnInterface) TransactionReceiverClient {
	return &transactionReceiverClient{cc}
}

func (c *transactionReceiverClient) Listen(ctx context.Context, opts ...grpc.CallOption) (TransactionReceiver_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &TransactionReceiver_ServiceDesc.Streams[0], TransactionReceiver_Listen_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &transactionReceiverListenClient{stream}
	return x, nil
}

type TransactionReceiver_ListenClient interface {
	Send(*trantorpb.Transaction) error
	CloseAndRecv() (*ByeBye, error)
	grpc.ClientStream
}

type transactionReceiverListenClient struct {
	grpc.ClientStream
}

func (x *transactionReceiverListenClient) Send(m *trantorpb.Transaction) error {
	return x.ClientStream.SendMsg(m)
}

func (x *transactionReceiverListenClient) CloseAndRecv() (*ByeBye, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ByeBye)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transactionReceiverClient) Output(ctx context.Context, in *Empty, opts ...grpc.CallOption) (TransactionReceiver_OutputClient, error) {
	stream, err := c.cc.NewStream(ctx, &TransactionReceiver_ServiceDesc.Streams[1], TransactionReceiver_Output_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &transactionReceiverOutputClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TransactionReceiver_OutputClient interface {
	Recv() (*DeliveredBatch, error)
	grpc.ClientStream
}

type transactionReceiverOutputClient struct {
	grpc.ClientStream
}

func (x *transactionReceiverOutputClient) Recv() (*DeliveredBatch, error) {
	m := new(DeliveredBatch)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TransactionReceiverServer is the server API for TransactionReceiver service.
// All implementations must embed UnimplementedTransactionReceiverServer
// for forward compatibility
type TransactionReceiverServer interface {
	Listen(TransactionReceiver_ListenServer) error
	Output(*Empty, TransactionReceiver_OutputServer) error
	mustEmbedUnimplementedTransactionReceiverServer()
}

// UnimplementedTransactionReceiverServer must be embedded to have forward compatible implementations.
type UnimplementedTransactionReceiverServer struct {
}

func (UnimplementedTransactionReceiverServer) Listen(TransactionReceiver_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedTransactionReceiverServer) Output(*Empty, TransactionReceiver_OutputServer) error {
	return status.Errorf(codes.Unimplemented, "method Output not implemented")
}
func (UnimplementedTransactionReceiverServer) mustEmbedUnimplementedTransactionReceiverServer() {}

// UnsafeTransactionReceiverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionReceiverServer will
// result in compilation errors.
type UnsafeTransactionReceiverServer interface {
	mustEmbedUnimplementedTransactionReceiverServer()
}

func RegisterTransactionReceiverServer(s grpc.ServiceRegistrar, srv TransactionReceiverServer) {
	s.RegisterService(&TransactionReceiver_ServiceDesc, srv)
}

func _TransactionReceiver_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransactionReceiverServer).Listen(&transactionReceiverListenServer{stream})
}

type TransactionReceiver_ListenServer interface {
	SendAndClose(*ByeBye) error
	Recv() (*trantorpb.Transaction, error)
	grpc.ServerStream
}

type transactionReceiverListenServer struct {
	grpc.ServerStream
}

func (x *transactionReceiverListenServer) SendAndClose(m *ByeBye) error {
	return x.ServerStream.SendMsg(m)
}

func (x *transactionReceiverListenServer) Recv() (*trantorpb.Transaction, error) {
	m := new(trantorpb.Transaction)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TransactionReceiver_Output_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactionReceiverServer).Output(m, &transactionReceiverOutputServer{stream})
}

type TransactionReceiver_OutputServer interface {
	Send(*DeliveredBatch) error
	grpc.ServerStream
}

type transactionReceiverOutputServer struct {
	grpc.ServerStream
}

func (x *transactionReceiverOutputServer) Send(m *DeliveredBatch) error {
	return x.ServerStream.SendMsg(m)
}

// TransactionReceiver_ServiceDesc is the grpc.ServiceDesc for TransactionReceiver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionReceiver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "receiver.TransactionReceiver",
	HandlerType: (*TransactionReceiverServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Listen",
			Handler:       _TransactionReceiver_Listen_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Output",
			Handler:       _TransactionReceiver_Output_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "transactionreceiver/transactionreceiver.proto",
}
