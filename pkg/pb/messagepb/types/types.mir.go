// Code generated by Mir codegen. DO NOT EDIT.

package messagepbtypes

import (
	mirreflect "github.com/filecoin-project/mir/codegen/mirreflect"
	types8 "github.com/filecoin-project/mir/pkg/pb/abbapb/types"
	types10 "github.com/filecoin-project/mir/pkg/pb/aleapb/agreementpb/types"
	types9 "github.com/filecoin-project/mir/pkg/pb/aleapb/bcpb/types"
	types11 "github.com/filecoin-project/mir/pkg/pb/aleapb/directorpb/types"
	types3 "github.com/filecoin-project/mir/pkg/pb/availabilitypb/mscpb/types"
	types2 "github.com/filecoin-project/mir/pkg/pb/bcbpb/types"
	types5 "github.com/filecoin-project/mir/pkg/pb/checkpointpb/types"
	types1 "github.com/filecoin-project/mir/pkg/pb/isspb/types"
	messagepb "github.com/filecoin-project/mir/pkg/pb/messagepb"
	types6 "github.com/filecoin-project/mir/pkg/pb/ordererpb/types"
	types4 "github.com/filecoin-project/mir/pkg/pb/pingpongpb/types"
	types12 "github.com/filecoin-project/mir/pkg/pb/reliablenetpb/messages/types"
	types13 "github.com/filecoin-project/mir/pkg/pb/threshcheckpointpb/types"
	types7 "github.com/filecoin-project/mir/pkg/pb/vcbpb/types"
	types "github.com/filecoin-project/mir/pkg/types"
	reflectutil "github.com/filecoin-project/mir/pkg/util/reflectutil"
)

type Message struct {
	DestModule types.ModuleID
	Type       Message_Type
}

type Message_Type interface {
	mirreflect.GeneratedType
	isMessage_Type()
	Pb() messagepb.Message_Type
}

type Message_TypeWrapper[T any] interface {
	Message_Type
	Unwrap() *T
}

func Message_TypeFromPb(pb messagepb.Message_Type) Message_Type {
	if pb == nil {
		return nil
	}
	switch pb := pb.(type) {
	case *messagepb.Message_Iss:
		return &Message_Iss{Iss: types1.ISSMessageFromPb(pb.Iss)}
	case *messagepb.Message_Bcb:
		return &Message_Bcb{Bcb: types2.MessageFromPb(pb.Bcb)}
	case *messagepb.Message_MultisigCollector:
		return &Message_MultisigCollector{MultisigCollector: types3.MessageFromPb(pb.MultisigCollector)}
	case *messagepb.Message_Pingpong:
		return &Message_Pingpong{Pingpong: types4.MessageFromPb(pb.Pingpong)}
	case *messagepb.Message_Checkpoint:
		return &Message_Checkpoint{Checkpoint: types5.MessageFromPb(pb.Checkpoint)}
	case *messagepb.Message_Orderer:
		return &Message_Orderer{Orderer: types6.MessageFromPb(pb.Orderer)}
	case *messagepb.Message_Vcb:
		return &Message_Vcb{Vcb: types7.MessageFromPb(pb.Vcb)}
	case *messagepb.Message_Abba:
		return &Message_Abba{Abba: types8.MessageFromPb(pb.Abba)}
	case *messagepb.Message_AleaBroadcast:
		return &Message_AleaBroadcast{AleaBroadcast: types9.MessageFromPb(pb.AleaBroadcast)}
	case *messagepb.Message_AleaAgreement:
		return &Message_AleaAgreement{AleaAgreement: types10.MessageFromPb(pb.AleaAgreement)}
	case *messagepb.Message_AleaDirector:
		return &Message_AleaDirector{AleaDirector: types11.MessageFromPb(pb.AleaDirector)}
	case *messagepb.Message_ReliableNet:
		return &Message_ReliableNet{ReliableNet: types12.MessageFromPb(pb.ReliableNet)}
	case *messagepb.Message_Threshcheckpoint:
		return &Message_Threshcheckpoint{Threshcheckpoint: types13.MessageFromPb(pb.Threshcheckpoint)}
	}
	return nil
}

type Message_Iss struct {
	Iss *types1.ISSMessage
}

func (*Message_Iss) isMessage_Type() {}

func (w *Message_Iss) Unwrap() *types1.ISSMessage {
	return w.Iss
}

func (w *Message_Iss) Pb() messagepb.Message_Type {
	if w == nil {
		return nil
	}
	if w.Iss == nil {
		return &messagepb.Message_Iss{}
	}
	return &messagepb.Message_Iss{Iss: (w.Iss).Pb()}
}

func (*Message_Iss) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*messagepb.Message_Iss]()}
}

type Message_Bcb struct {
	Bcb *types2.Message
}

func (*Message_Bcb) isMessage_Type() {}

func (w *Message_Bcb) Unwrap() *types2.Message {
	return w.Bcb
}

func (w *Message_Bcb) Pb() messagepb.Message_Type {
	if w == nil {
		return nil
	}
	if w.Bcb == nil {
		return &messagepb.Message_Bcb{}
	}
	return &messagepb.Message_Bcb{Bcb: (w.Bcb).Pb()}
}

func (*Message_Bcb) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*messagepb.Message_Bcb]()}
}

type Message_MultisigCollector struct {
	MultisigCollector *types3.Message
}

func (*Message_MultisigCollector) isMessage_Type() {}

func (w *Message_MultisigCollector) Unwrap() *types3.Message {
	return w.MultisigCollector
}

func (w *Message_MultisigCollector) Pb() messagepb.Message_Type {
	if w == nil {
		return nil
	}
	if w.MultisigCollector == nil {
		return &messagepb.Message_MultisigCollector{}
	}
	return &messagepb.Message_MultisigCollector{MultisigCollector: (w.MultisigCollector).Pb()}
}

func (*Message_MultisigCollector) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*messagepb.Message_MultisigCollector]()}
}

type Message_Pingpong struct {
	Pingpong *types4.Message
}

func (*Message_Pingpong) isMessage_Type() {}

func (w *Message_Pingpong) Unwrap() *types4.Message {
	return w.Pingpong
}

func (w *Message_Pingpong) Pb() messagepb.Message_Type {
	if w == nil {
		return nil
	}
	if w.Pingpong == nil {
		return &messagepb.Message_Pingpong{}
	}
	return &messagepb.Message_Pingpong{Pingpong: (w.Pingpong).Pb()}
}

func (*Message_Pingpong) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*messagepb.Message_Pingpong]()}
}

type Message_Checkpoint struct {
	Checkpoint *types5.Message
}

func (*Message_Checkpoint) isMessage_Type() {}

func (w *Message_Checkpoint) Unwrap() *types5.Message {
	return w.Checkpoint
}

func (w *Message_Checkpoint) Pb() messagepb.Message_Type {
	if w == nil {
		return nil
	}
	if w.Checkpoint == nil {
		return &messagepb.Message_Checkpoint{}
	}
	return &messagepb.Message_Checkpoint{Checkpoint: (w.Checkpoint).Pb()}
}

func (*Message_Checkpoint) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*messagepb.Message_Checkpoint]()}
}

type Message_Orderer struct {
	Orderer *types6.Message
}

func (*Message_Orderer) isMessage_Type() {}

func (w *Message_Orderer) Unwrap() *types6.Message {
	return w.Orderer
}

func (w *Message_Orderer) Pb() messagepb.Message_Type {
	if w == nil {
		return nil
	}
	if w.Orderer == nil {
		return &messagepb.Message_Orderer{}
	}
	return &messagepb.Message_Orderer{Orderer: (w.Orderer).Pb()}
}

func (*Message_Orderer) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*messagepb.Message_Orderer]()}
}

type Message_Vcb struct {
	Vcb *types7.Message
}

func (*Message_Vcb) isMessage_Type() {}

func (w *Message_Vcb) Unwrap() *types7.Message {
	return w.Vcb
}

func (w *Message_Vcb) Pb() messagepb.Message_Type {
	if w == nil {
		return nil
	}
	if w.Vcb == nil {
		return &messagepb.Message_Vcb{}
	}
	return &messagepb.Message_Vcb{Vcb: (w.Vcb).Pb()}
}

func (*Message_Vcb) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*messagepb.Message_Vcb]()}
}

type Message_Abba struct {
	Abba *types8.Message
}

func (*Message_Abba) isMessage_Type() {}

func (w *Message_Abba) Unwrap() *types8.Message {
	return w.Abba
}

func (w *Message_Abba) Pb() messagepb.Message_Type {
	if w == nil {
		return nil
	}
	if w.Abba == nil {
		return &messagepb.Message_Abba{}
	}
	return &messagepb.Message_Abba{Abba: (w.Abba).Pb()}
}

func (*Message_Abba) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*messagepb.Message_Abba]()}
}

type Message_AleaBroadcast struct {
	AleaBroadcast *types9.Message
}

func (*Message_AleaBroadcast) isMessage_Type() {}

func (w *Message_AleaBroadcast) Unwrap() *types9.Message {
	return w.AleaBroadcast
}

func (w *Message_AleaBroadcast) Pb() messagepb.Message_Type {
	if w == nil {
		return nil
	}
	if w.AleaBroadcast == nil {
		return &messagepb.Message_AleaBroadcast{}
	}
	return &messagepb.Message_AleaBroadcast{AleaBroadcast: (w.AleaBroadcast).Pb()}
}

func (*Message_AleaBroadcast) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*messagepb.Message_AleaBroadcast]()}
}

type Message_AleaAgreement struct {
	AleaAgreement *types10.Message
}

func (*Message_AleaAgreement) isMessage_Type() {}

func (w *Message_AleaAgreement) Unwrap() *types10.Message {
	return w.AleaAgreement
}

func (w *Message_AleaAgreement) Pb() messagepb.Message_Type {
	if w == nil {
		return nil
	}
	if w.AleaAgreement == nil {
		return &messagepb.Message_AleaAgreement{}
	}
	return &messagepb.Message_AleaAgreement{AleaAgreement: (w.AleaAgreement).Pb()}
}

func (*Message_AleaAgreement) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*messagepb.Message_AleaAgreement]()}
}

type Message_AleaDirector struct {
	AleaDirector *types11.Message
}

func (*Message_AleaDirector) isMessage_Type() {}

func (w *Message_AleaDirector) Unwrap() *types11.Message {
	return w.AleaDirector
}

func (w *Message_AleaDirector) Pb() messagepb.Message_Type {
	if w == nil {
		return nil
	}
	if w.AleaDirector == nil {
		return &messagepb.Message_AleaDirector{}
	}
	return &messagepb.Message_AleaDirector{AleaDirector: (w.AleaDirector).Pb()}
}

func (*Message_AleaDirector) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*messagepb.Message_AleaDirector]()}
}

type Message_ReliableNet struct {
	ReliableNet *types12.Message
}

func (*Message_ReliableNet) isMessage_Type() {}

func (w *Message_ReliableNet) Unwrap() *types12.Message {
	return w.ReliableNet
}

func (w *Message_ReliableNet) Pb() messagepb.Message_Type {
	if w == nil {
		return nil
	}
	if w.ReliableNet == nil {
		return &messagepb.Message_ReliableNet{}
	}
	return &messagepb.Message_ReliableNet{ReliableNet: (w.ReliableNet).Pb()}
}

func (*Message_ReliableNet) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*messagepb.Message_ReliableNet]()}
}

type Message_Threshcheckpoint struct {
	Threshcheckpoint *types13.Message
}

func (*Message_Threshcheckpoint) isMessage_Type() {}

func (w *Message_Threshcheckpoint) Unwrap() *types13.Message {
	return w.Threshcheckpoint
}

func (w *Message_Threshcheckpoint) Pb() messagepb.Message_Type {
	if w == nil {
		return nil
	}
	if w.Threshcheckpoint == nil {
		return &messagepb.Message_Threshcheckpoint{}
	}
	return &messagepb.Message_Threshcheckpoint{Threshcheckpoint: (w.Threshcheckpoint).Pb()}
}

func (*Message_Threshcheckpoint) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*messagepb.Message_Threshcheckpoint]()}
}

func MessageFromPb(pb *messagepb.Message) *Message {
	if pb == nil {
		return nil
	}
	return &Message{
		DestModule: (types.ModuleID)(pb.DestModule),
		Type:       Message_TypeFromPb(pb.Type),
	}
}

func (m *Message) Pb() *messagepb.Message {
	if m == nil {
		return nil
	}
	pbMessage := &messagepb.Message{}
	{
		pbMessage.DestModule = (string)(m.DestModule)
		if m.Type != nil {
			pbMessage.Type = (m.Type).Pb()
		}
	}

	return pbMessage
}

func (*Message) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*messagepb.Message]()}
}
