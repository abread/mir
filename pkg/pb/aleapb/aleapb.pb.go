// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: aleapb/aleapb.proto

package aleapb

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"

	requestpb "github.com/filecoin-project/mir/pkg/pb/requestpb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AleaMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance uint64 `protobuf:"varint,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Types that are assignable to Type:
	//	*AleaMessage_Vcbc
	//	*AleaMessage_Agreement
	//	*AleaMessage_Abba
	Type isAleaMessage_Type `protobuf_oneof:"type"`
}

func (x *AleaMessage) Reset() {
	*x = AleaMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleapb_aleapb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AleaMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AleaMessage) ProtoMessage() {}

func (x *AleaMessage) ProtoReflect() protoreflect.Message {
	mi := &file_aleapb_aleapb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AleaMessage.ProtoReflect.Descriptor instead.
func (*AleaMessage) Descriptor() ([]byte, []int) {
	return file_aleapb_aleapb_proto_rawDescGZIP(), []int{0}
}

func (x *AleaMessage) GetInstance() uint64 {
	if x != nil {
		return x.Instance
	}
	return 0
}

func (m *AleaMessage) GetType() isAleaMessage_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *AleaMessage) GetVcbc() *VCBCMessage {
	if x, ok := x.GetType().(*AleaMessage_Vcbc); ok {
		return x.Vcbc
	}
	return nil
}

func (x *AleaMessage) GetAgreement() *AgreementMessage {
	if x, ok := x.GetType().(*AleaMessage_Agreement); ok {
		return x.Agreement
	}
	return nil
}

func (x *AleaMessage) GetAbba() *ABBAMessage {
	if x, ok := x.GetType().(*AleaMessage_Abba); ok {
		return x.Abba
	}
	return nil
}

type isAleaMessage_Type interface {
	isAleaMessage_Type()
}

type AleaMessage_Vcbc struct {
	Vcbc *VCBCMessage `protobuf:"bytes,2,opt,name=vcbc,proto3,oneof"`
}

type AleaMessage_Agreement struct {
	Agreement *AgreementMessage `protobuf:"bytes,3,opt,name=agreement,proto3,oneof"`
}

type AleaMessage_Abba struct {
	Abba *ABBAMessage `protobuf:"bytes,4,opt,name=abba,proto3,oneof"`
}

func (*AleaMessage_Vcbc) isAleaMessage_Type() {}

func (*AleaMessage_Agreement) isAleaMessage_Type() {}

func (*AleaMessage_Abba) isAleaMessage_Type() {}

type AgreementMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance uint64 `protobuf:"varint,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Types that are assignable to Type:
	//	*AgreementMessage_FillGap
	//	*AgreementMessage_Filler
	Type isAgreementMessage_Type `protobuf_oneof:"type"`
}

func (x *AgreementMessage) Reset() {
	*x = AgreementMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleapb_aleapb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgreementMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgreementMessage) ProtoMessage() {}

func (x *AgreementMessage) ProtoReflect() protoreflect.Message {
	mi := &file_aleapb_aleapb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgreementMessage.ProtoReflect.Descriptor instead.
func (*AgreementMessage) Descriptor() ([]byte, []int) {
	return file_aleapb_aleapb_proto_rawDescGZIP(), []int{1}
}

func (x *AgreementMessage) GetInstance() uint64 {
	if x != nil {
		return x.Instance
	}
	return 0
}

func (m *AgreementMessage) GetType() isAgreementMessage_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *AgreementMessage) GetFillGap() *AgreementFillGapMessage {
	if x, ok := x.GetType().(*AgreementMessage_FillGap); ok {
		return x.FillGap
	}
	return nil
}

func (x *AgreementMessage) GetFiller() *AgreementFillerMessage {
	if x, ok := x.GetType().(*AgreementMessage_Filler); ok {
		return x.Filler
	}
	return nil
}

type isAgreementMessage_Type interface {
	isAgreementMessage_Type()
}

type AgreementMessage_FillGap struct {
	FillGap *AgreementFillGapMessage `protobuf:"bytes,2,opt,name=fillGap,proto3,oneof"`
}

type AgreementMessage_Filler struct {
	Filler *AgreementFillerMessage `protobuf:"bytes,3,opt,name=filler,proto3,oneof"`
}

func (*AgreementMessage_FillGap) isAgreementMessage_Type() {}

func (*AgreementMessage_Filler) isAgreementMessage_Type() {}

type AgreementFillGapMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueIdx uint32 `protobuf:"varint,1,opt,name=queue_idx,json=queueIdx,proto3" json:"queue_idx,omitempty"`
	Slot     uint64 `protobuf:"varint,2,opt,name=slot,proto3" json:"slot,omitempty"` // TODO: confirm type
}

func (x *AgreementFillGapMessage) Reset() {
	*x = AgreementFillGapMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleapb_aleapb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgreementFillGapMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgreementFillGapMessage) ProtoMessage() {}

func (x *AgreementFillGapMessage) ProtoReflect() protoreflect.Message {
	mi := &file_aleapb_aleapb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgreementFillGapMessage.ProtoReflect.Descriptor instead.
func (*AgreementFillGapMessage) Descriptor() ([]byte, []int) {
	return file_aleapb_aleapb_proto_rawDescGZIP(), []int{2}
}

func (x *AgreementFillGapMessage) GetQueueIdx() uint32 {
	if x != nil {
		return x.QueueIdx
	}
	return 0
}

func (x *AgreementFillGapMessage) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

type AgreementFillerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: may be simplified(?)
	Entries []*VCBCMessage `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *AgreementFillerMessage) Reset() {
	*x = AgreementFillerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleapb_aleapb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgreementFillerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgreementFillerMessage) ProtoMessage() {}

func (x *AgreementFillerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_aleapb_aleapb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgreementFillerMessage.ProtoReflect.Descriptor instead.
func (*AgreementFillerMessage) Descriptor() ([]byte, []int) {
	return file_aleapb_aleapb_proto_rawDescGZIP(), []int{3}
}

func (x *AgreementFillerMessage) GetEntries() []*VCBCMessage {
	if x != nil {
		return x.Entries
	}
	return nil
}

type VCBCMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance *VCBCMessage_VCBCId `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Types that are assignable to Type:
	//	*VCBCMessage_Send
	//	*VCBCMessage_Echo
	//	*VCBCMessage_Final
	Type isVCBCMessage_Type `protobuf_oneof:"type"`
}

func (x *VCBCMessage) Reset() {
	*x = VCBCMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleapb_aleapb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCBCMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCBCMessage) ProtoMessage() {}

func (x *VCBCMessage) ProtoReflect() protoreflect.Message {
	mi := &file_aleapb_aleapb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCBCMessage.ProtoReflect.Descriptor instead.
func (*VCBCMessage) Descriptor() ([]byte, []int) {
	return file_aleapb_aleapb_proto_rawDescGZIP(), []int{4}
}

func (x *VCBCMessage) GetInstance() *VCBCMessage_VCBCId {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (m *VCBCMessage) GetType() isVCBCMessage_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *VCBCMessage) GetSend() *VCBCSendMessage {
	if x, ok := x.GetType().(*VCBCMessage_Send); ok {
		return x.Send
	}
	return nil
}

func (x *VCBCMessage) GetEcho() *VCBCEchoMessage {
	if x, ok := x.GetType().(*VCBCMessage_Echo); ok {
		return x.Echo
	}
	return nil
}

func (x *VCBCMessage) GetFinal() *VCBCFinalMessage {
	if x, ok := x.GetType().(*VCBCMessage_Final); ok {
		return x.Final
	}
	return nil
}

type isVCBCMessage_Type interface {
	isVCBCMessage_Type()
}

type VCBCMessage_Send struct {
	Send *VCBCSendMessage `protobuf:"bytes,2,opt,name=send,proto3,oneof"`
}

type VCBCMessage_Echo struct {
	Echo *VCBCEchoMessage `protobuf:"bytes,3,opt,name=echo,proto3,oneof"`
}

type VCBCMessage_Final struct {
	Final *VCBCFinalMessage `protobuf:"bytes,4,opt,name=final,proto3,oneof"`
}

func (*VCBCMessage_Send) isVCBCMessage_Type() {}

func (*VCBCMessage_Echo) isVCBCMessage_Type() {}

func (*VCBCMessage_Final) isVCBCMessage_Type() {}

type VCBCSendMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload *requestpb.Batch `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *VCBCSendMessage) Reset() {
	*x = VCBCSendMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleapb_aleapb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCBCSendMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCBCSendMessage) ProtoMessage() {}

func (x *VCBCSendMessage) ProtoReflect() protoreflect.Message {
	mi := &file_aleapb_aleapb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCBCSendMessage.ProtoReflect.Descriptor instead.
func (*VCBCSendMessage) Descriptor() ([]byte, []int) {
	return file_aleapb_aleapb_proto_rawDescGZIP(), []int{5}
}

func (x *VCBCSendMessage) GetPayload() *requestpb.Batch {
	if x != nil {
		return x.Payload
	}
	return nil
}

type VCBCEchoMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload        *requestpb.Batch `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	SignatureShare []byte           `protobuf:"bytes,2,opt,name=signature_share,json=signatureShare,proto3" json:"signature_share,omitempty"`
}

func (x *VCBCEchoMessage) Reset() {
	*x = VCBCEchoMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleapb_aleapb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCBCEchoMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCBCEchoMessage) ProtoMessage() {}

func (x *VCBCEchoMessage) ProtoReflect() protoreflect.Message {
	mi := &file_aleapb_aleapb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCBCEchoMessage.ProtoReflect.Descriptor instead.
func (*VCBCEchoMessage) Descriptor() ([]byte, []int) {
	return file_aleapb_aleapb_proto_rawDescGZIP(), []int{6}
}

func (x *VCBCEchoMessage) GetPayload() *requestpb.Batch {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *VCBCEchoMessage) GetSignatureShare() []byte {
	if x != nil {
		return x.SignatureShare
	}
	return nil
}

type VCBCFinalMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload   *requestpb.Batch `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Signature []byte           `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *VCBCFinalMessage) Reset() {
	*x = VCBCFinalMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleapb_aleapb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCBCFinalMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCBCFinalMessage) ProtoMessage() {}

func (x *VCBCFinalMessage) ProtoReflect() protoreflect.Message {
	mi := &file_aleapb_aleapb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCBCFinalMessage.ProtoReflect.Descriptor instead.
func (*VCBCFinalMessage) Descriptor() ([]byte, []int) {
	return file_aleapb_aleapb_proto_rawDescGZIP(), []int{7}
}

func (x *VCBCFinalMessage) GetPayload() *requestpb.Batch {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *VCBCFinalMessage) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ABBAMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance uint64 `protobuf:"varint,1,opt,name=instance,proto3" json:"instance,omitempty"` // TODO
}

func (x *ABBAMessage) Reset() {
	*x = ABBAMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleapb_aleapb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ABBAMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ABBAMessage) ProtoMessage() {}

func (x *ABBAMessage) ProtoReflect() protoreflect.Message {
	mi := &file_aleapb_aleapb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ABBAMessage.ProtoReflect.Descriptor instead.
func (*ABBAMessage) Descriptor() ([]byte, []int) {
	return file_aleapb_aleapb_proto_rawDescGZIP(), []int{8}
}

func (x *ABBAMessage) GetInstance() uint64 {
	if x != nil {
		return x.Instance
	}
	return 0
}

type VCBCMessage_VCBCId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitiatorId uint64 `protobuf:"varint,1,opt,name=initiator_id,json=initiatorId,proto3" json:"initiator_id,omitempty"`
	Priority    uint64 `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *VCBCMessage_VCBCId) Reset() {
	*x = VCBCMessage_VCBCId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleapb_aleapb_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCBCMessage_VCBCId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCBCMessage_VCBCId) ProtoMessage() {}

func (x *VCBCMessage_VCBCId) ProtoReflect() protoreflect.Message {
	mi := &file_aleapb_aleapb_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCBCMessage_VCBCId.ProtoReflect.Descriptor instead.
func (*VCBCMessage_VCBCId) Descriptor() ([]byte, []int) {
	return file_aleapb_aleapb_proto_rawDescGZIP(), []int{4, 0}
}

func (x *VCBCMessage_VCBCId) GetInitiatorId() uint64 {
	if x != nil {
		return x.InitiatorId
	}
	return 0
}

func (x *VCBCMessage_VCBCId) GetPriority() uint64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

var File_aleapb_aleapb_proto protoreflect.FileDescriptor

var file_aleapb_aleapb_proto_rawDesc = []byte{
	0x0a, 0x13, 0x61, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x2f, 0x61, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x61, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x1a, 0x19, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc1, 0x01, 0x0a, 0x0b, 0x41, 0x6c, 0x65,
	0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x76, 0x63, 0x62, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x2e, 0x56, 0x43, 0x42, 0x43,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x04, 0x76, 0x63, 0x62, 0x63, 0x12,
	0x38, 0x0a, 0x09, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x2e, 0x41, 0x67, 0x72, 0x65,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x09,
	0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x61, 0x62, 0x62,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x6c, 0x65, 0x61, 0x70, 0x62,
	0x2e, 0x41, 0x42, 0x42, 0x41, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x04,
	0x61, 0x62, 0x62, 0x61, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xad, 0x01, 0x0a,
	0x10, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3b, 0x0a,
	0x07, 0x66, 0x69, 0x6c, 0x6c, 0x47, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x61, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x2e, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x46, 0x69, 0x6c, 0x6c, 0x47, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x6c, 0x47, 0x61, 0x70, 0x12, 0x38, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x6c, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x6c, 0x65,
	0x61, 0x70, 0x62, 0x2e, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c,
	0x6c, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x6c, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x4a, 0x0a, 0x17,
	0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x6c, 0x47, 0x61, 0x70,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x49, 0x64, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x22, 0x47, 0x0a, 0x16, 0x41, 0x67, 0x72, 0x65,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x2e, 0x56, 0x43, 0x42,
	0x43, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x22, 0xa6, 0x02, 0x0a, 0x0b, 0x56, 0x43, 0x42, 0x43, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x36, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x2e, 0x56, 0x43, 0x42,
	0x43, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x56, 0x43, 0x42, 0x43, 0x49, 0x64, 0x52,
	0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x73, 0x65, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6c, 0x65, 0x61, 0x70, 0x62,
	0x2e, 0x56, 0x43, 0x42, 0x43, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x65, 0x63, 0x68, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x2e,
	0x56, 0x43, 0x42, 0x43, 0x45, 0x63, 0x68, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x04, 0x65, 0x63, 0x68, 0x6f, 0x12, 0x30, 0x0a, 0x05, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x2e,
	0x56, 0x43, 0x42, 0x43, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x05, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x1a, 0x47, 0x0a, 0x06, 0x56, 0x43, 0x42,
	0x43, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3d, 0x0a, 0x0f, 0x56, 0x43,
	0x42, 0x43, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x66, 0x0a, 0x0f, 0x56, 0x43, 0x42,
	0x43, 0x45, 0x63, 0x68, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x22, 0x5c, 0x0a, 0x10, 0x56, 0x43, 0x42, 0x43, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22,
	0x29, 0x0a, 0x0b, 0x41, 0x42, 0x42, 0x41, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x2d, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x6d, 0x69, 0x72, 0x62, 0x66, 0x74,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0x2f, 0x61, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_aleapb_aleapb_proto_rawDescOnce sync.Once
	file_aleapb_aleapb_proto_rawDescData = file_aleapb_aleapb_proto_rawDesc
)

func file_aleapb_aleapb_proto_rawDescGZIP() []byte {
	file_aleapb_aleapb_proto_rawDescOnce.Do(func() {
		file_aleapb_aleapb_proto_rawDescData = protoimpl.X.CompressGZIP(file_aleapb_aleapb_proto_rawDescData)
	})
	return file_aleapb_aleapb_proto_rawDescData
}

var file_aleapb_aleapb_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_aleapb_aleapb_proto_goTypes = []interface{}{
	(*AleaMessage)(nil),             // 0: aleapb.AleaMessage
	(*AgreementMessage)(nil),        // 1: aleapb.AgreementMessage
	(*AgreementFillGapMessage)(nil), // 2: aleapb.AgreementFillGapMessage
	(*AgreementFillerMessage)(nil),  // 3: aleapb.AgreementFillerMessage
	(*VCBCMessage)(nil),             // 4: aleapb.VCBCMessage
	(*VCBCSendMessage)(nil),         // 5: aleapb.VCBCSendMessage
	(*VCBCEchoMessage)(nil),         // 6: aleapb.VCBCEchoMessage
	(*VCBCFinalMessage)(nil),        // 7: aleapb.VCBCFinalMessage
	(*ABBAMessage)(nil),             // 8: aleapb.ABBAMessage
	(*VCBCMessage_VCBCId)(nil),      // 9: aleapb.VCBCMessage.VCBCId
	(*requestpb.Batch)(nil),         // 10: requestpb.Batch
}
var file_aleapb_aleapb_proto_depIdxs = []int32{
	4,  // 0: aleapb.AleaMessage.vcbc:type_name -> aleapb.VCBCMessage
	1,  // 1: aleapb.AleaMessage.agreement:type_name -> aleapb.AgreementMessage
	8,  // 2: aleapb.AleaMessage.abba:type_name -> aleapb.ABBAMessage
	2,  // 3: aleapb.AgreementMessage.fillGap:type_name -> aleapb.AgreementFillGapMessage
	3,  // 4: aleapb.AgreementMessage.filler:type_name -> aleapb.AgreementFillerMessage
	4,  // 5: aleapb.AgreementFillerMessage.entries:type_name -> aleapb.VCBCMessage
	9,  // 6: aleapb.VCBCMessage.instance:type_name -> aleapb.VCBCMessage.VCBCId
	5,  // 7: aleapb.VCBCMessage.send:type_name -> aleapb.VCBCSendMessage
	6,  // 8: aleapb.VCBCMessage.echo:type_name -> aleapb.VCBCEchoMessage
	7,  // 9: aleapb.VCBCMessage.final:type_name -> aleapb.VCBCFinalMessage
	10, // 10: aleapb.VCBCSendMessage.payload:type_name -> requestpb.Batch
	10, // 11: aleapb.VCBCEchoMessage.payload:type_name -> requestpb.Batch
	10, // 12: aleapb.VCBCFinalMessage.payload:type_name -> requestpb.Batch
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_aleapb_aleapb_proto_init() }
func file_aleapb_aleapb_proto_init() {
	if File_aleapb_aleapb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_aleapb_aleapb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AleaMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleapb_aleapb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgreementMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleapb_aleapb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgreementFillGapMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleapb_aleapb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgreementFillerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleapb_aleapb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCBCMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleapb_aleapb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCBCSendMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleapb_aleapb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCBCEchoMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleapb_aleapb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCBCFinalMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleapb_aleapb_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ABBAMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleapb_aleapb_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCBCMessage_VCBCId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_aleapb_aleapb_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*AleaMessage_Vcbc)(nil),
		(*AleaMessage_Agreement)(nil),
		(*AleaMessage_Abba)(nil),
	}
	file_aleapb_aleapb_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*AgreementMessage_FillGap)(nil),
		(*AgreementMessage_Filler)(nil),
	}
	file_aleapb_aleapb_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*VCBCMessage_Send)(nil),
		(*VCBCMessage_Echo)(nil),
		(*VCBCMessage_Final)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aleapb_aleapb_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_aleapb_aleapb_proto_goTypes,
		DependencyIndexes: file_aleapb_aleapb_proto_depIdxs,
		MessageInfos:      file_aleapb_aleapb_proto_msgTypes,
	}.Build()
	File_aleapb_aleapb_proto = out.File
	file_aleapb_aleapb_proto_rawDesc = nil
	file_aleapb_aleapb_proto_goTypes = nil
	file_aleapb_aleapb_proto_depIdxs = nil
}
