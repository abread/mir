// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: aleapb/aleapb.proto

package aleapb

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"

	requestpb "github.com/filecoin-project/mir/pkg/pb/requestpb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CobaltValueSet int32

const (
	CobaltValueSet_EMPTY        CobaltValueSet = 0
	CobaltValueSet_ZERO         CobaltValueSet = 1
	CobaltValueSet_ONE          CobaltValueSet = 2
	CobaltValueSet_ZERO_AND_ONE CobaltValueSet = 3
)

// Enum value maps for CobaltValueSet.
var (
	CobaltValueSet_name = map[int32]string{
		0: "EMPTY",
		1: "ZERO",
		2: "ONE",
		3: "ZERO_AND_ONE",
	}
	CobaltValueSet_value = map[string]int32{
		"EMPTY":        0,
		"ZERO":         1,
		"ONE":          2,
		"ZERO_AND_ONE": 3,
	}
)

func (x CobaltValueSet) Enum() *CobaltValueSet {
	p := new(CobaltValueSet)
	*p = x
	return p
}

func (x CobaltValueSet) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CobaltValueSet) Descriptor() protoreflect.EnumDescriptor {
	return file_aleapb_aleapb_proto_enumTypes[0].Descriptor()
}

func (CobaltValueSet) Type() protoreflect.EnumType {
	return &file_aleapb_aleapb_proto_enumTypes[0]
}

func (x CobaltValueSet) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CobaltValueSet.Descriptor instead.
func (CobaltValueSet) EnumDescriptor() ([]byte, []int) {
	return file_aleapb_aleapb_proto_rawDescGZIP(), []int{0}
}

type AleaMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*AleaMessage_Vcbc
	//	*AleaMessage_Agreement
	//	*AleaMessage_FillGap
	//	*AleaMessage_Filler
	Type isAleaMessage_Type `protobuf_oneof:"type"`
}

func (x *AleaMessage) Reset() {
	*x = AleaMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleapb_aleapb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AleaMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AleaMessage) ProtoMessage() {}

func (x *AleaMessage) ProtoReflect() protoreflect.Message {
	mi := &file_aleapb_aleapb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AleaMessage.ProtoReflect.Descriptor instead.
func (*AleaMessage) Descriptor() ([]byte, []int) {
	return file_aleapb_aleapb_proto_rawDescGZIP(), []int{0}
}

func (m *AleaMessage) GetType() isAleaMessage_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *AleaMessage) GetVcbc() *VCBC {
	if x, ok := x.GetType().(*AleaMessage_Vcbc); ok {
		return x.Vcbc
	}
	return nil
}

func (x *AleaMessage) GetAgreement() *Agreement {
	if x, ok := x.GetType().(*AleaMessage_Agreement); ok {
		return x.Agreement
	}
	return nil
}

func (x *AleaMessage) GetFillGap() *FillGap {
	if x, ok := x.GetType().(*AleaMessage_FillGap); ok {
		return x.FillGap
	}
	return nil
}

func (x *AleaMessage) GetFiller() *Filler {
	if x, ok := x.GetType().(*AleaMessage_Filler); ok {
		return x.Filler
	}
	return nil
}

type isAleaMessage_Type interface {
	isAleaMessage_Type()
}

type AleaMessage_Vcbc struct {
	Vcbc *VCBC `protobuf:"bytes,1,opt,name=vcbc,proto3,oneof"`
}

type AleaMessage_Agreement struct {
	Agreement *Agreement `protobuf:"bytes,2,opt,name=agreement,proto3,oneof"`
}

type AleaMessage_FillGap struct {
	FillGap *FillGap `protobuf:"bytes,3,opt,name=fillGap,proto3,oneof"`
}

type AleaMessage_Filler struct {
	Filler *Filler `protobuf:"bytes,4,opt,name=filler,proto3,oneof"`
}

func (*AleaMessage_Vcbc) isAleaMessage_Type() {}

func (*AleaMessage_Agreement) isAleaMessage_Type() {}

func (*AleaMessage_FillGap) isAleaMessage_Type() {}

func (*AleaMessage_Filler) isAleaMessage_Type() {}

type MsgId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueIdx string `protobuf:"bytes,1,opt,name=queue_idx,json=queueIdx,proto3" json:"queue_idx,omitempty"`
	Slot     uint64 `protobuf:"varint,2,opt,name=slot,proto3" json:"slot,omitempty"`
}

func (x *MsgId) Reset() {
	*x = MsgId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleapb_aleapb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgId) ProtoMessage() {}

func (x *MsgId) ProtoReflect() protoreflect.Message {
	mi := &file_aleapb_aleapb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgId.ProtoReflect.Descriptor instead.
func (*MsgId) Descriptor() ([]byte, []int) {
	return file_aleapb_aleapb_proto_rawDescGZIP(), []int{1}
}

func (x *MsgId) GetQueueIdx() string {
	if x != nil {
		return x.QueueIdx
	}
	return ""
}

func (x *MsgId) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

type VCBC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance *MsgId `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Types that are assignable to Type:
	//	*VCBC_Send
	//	*VCBC_Echo
	//	*VCBC_Final
	Type isVCBC_Type `protobuf_oneof:"type"`
}

func (x *VCBC) Reset() {
	*x = VCBC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleapb_aleapb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCBC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCBC) ProtoMessage() {}

func (x *VCBC) ProtoReflect() protoreflect.Message {
	mi := &file_aleapb_aleapb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCBC.ProtoReflect.Descriptor instead.
func (*VCBC) Descriptor() ([]byte, []int) {
	return file_aleapb_aleapb_proto_rawDescGZIP(), []int{2}
}

func (x *VCBC) GetInstance() *MsgId {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (m *VCBC) GetType() isVCBC_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *VCBC) GetSend() *VCBCSend {
	if x, ok := x.GetType().(*VCBC_Send); ok {
		return x.Send
	}
	return nil
}

func (x *VCBC) GetEcho() *VCBCEcho {
	if x, ok := x.GetType().(*VCBC_Echo); ok {
		return x.Echo
	}
	return nil
}

func (x *VCBC) GetFinal() *VCBCFinal {
	if x, ok := x.GetType().(*VCBC_Final); ok {
		return x.Final
	}
	return nil
}

type isVCBC_Type interface {
	isVCBC_Type()
}

type VCBC_Send struct {
	Send *VCBCSend `protobuf:"bytes,2,opt,name=send,proto3,oneof"`
}

type VCBC_Echo struct {
	Echo *VCBCEcho `protobuf:"bytes,3,opt,name=echo,proto3,oneof"`
}

type VCBC_Final struct {
	Final *VCBCFinal `protobuf:"bytes,4,opt,name=final,proto3,oneof"`
}

func (*VCBC_Send) isVCBC_Type() {}

func (*VCBC_Echo) isVCBC_Type() {}

func (*VCBC_Final) isVCBC_Type() {}

type VCBCSend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload *requestpb.Batch `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *VCBCSend) Reset() {
	*x = VCBCSend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleapb_aleapb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCBCSend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCBCSend) ProtoMessage() {}

func (x *VCBCSend) ProtoReflect() protoreflect.Message {
	mi := &file_aleapb_aleapb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCBCSend.ProtoReflect.Descriptor instead.
func (*VCBCSend) Descriptor() ([]byte, []int) {
	return file_aleapb_aleapb_proto_rawDescGZIP(), []int{3}
}

func (x *VCBCSend) GetPayload() *requestpb.Batch {
	if x != nil {
		return x.Payload
	}
	return nil
}

type VCBCEcho struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload        *requestpb.Batch `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	SignatureShare []byte           `protobuf:"bytes,2,opt,name=signature_share,json=signatureShare,proto3" json:"signature_share,omitempty"`
}

func (x *VCBCEcho) Reset() {
	*x = VCBCEcho{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleapb_aleapb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCBCEcho) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCBCEcho) ProtoMessage() {}

func (x *VCBCEcho) ProtoReflect() protoreflect.Message {
	mi := &file_aleapb_aleapb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCBCEcho.ProtoReflect.Descriptor instead.
func (*VCBCEcho) Descriptor() ([]byte, []int) {
	return file_aleapb_aleapb_proto_rawDescGZIP(), []int{4}
}

func (x *VCBCEcho) GetPayload() *requestpb.Batch {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *VCBCEcho) GetSignatureShare() []byte {
	if x != nil {
		return x.SignatureShare
	}
	return nil
}

type VCBCFinal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload   *requestpb.Batch `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Signature []byte           `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *VCBCFinal) Reset() {
	*x = VCBCFinal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleapb_aleapb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCBCFinal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCBCFinal) ProtoMessage() {}

func (x *VCBCFinal) ProtoReflect() protoreflect.Message {
	mi := &file_aleapb_aleapb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCBCFinal.ProtoReflect.Descriptor instead.
func (*VCBCFinal) Descriptor() ([]byte, []int) {
	return file_aleapb_aleapb_proto_rawDescGZIP(), []int{5}
}

func (x *VCBCFinal) GetPayload() *requestpb.Batch {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *VCBCFinal) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type FillGap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *MsgId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FillGap) Reset() {
	*x = FillGap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleapb_aleapb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FillGap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FillGap) ProtoMessage() {}

func (x *FillGap) ProtoReflect() protoreflect.Message {
	mi := &file_aleapb_aleapb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FillGap.ProtoReflect.Descriptor instead.
func (*FillGap) Descriptor() ([]byte, []int) {
	return file_aleapb_aleapb_proto_rawDescGZIP(), []int{6}
}

func (x *FillGap) GetId() *MsgId {
	if x != nil {
		return x.Id
	}
	return nil
}

type Filler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  *MsgId     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Msg *VCBCFinal `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *Filler) Reset() {
	*x = Filler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleapb_aleapb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filler) ProtoMessage() {}

func (x *Filler) ProtoReflect() protoreflect.Message {
	mi := &file_aleapb_aleapb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filler.ProtoReflect.Descriptor instead.
func (*Filler) Descriptor() ([]byte, []int) {
	return file_aleapb_aleapb_proto_rawDescGZIP(), []int{7}
}

func (x *Filler) GetId() *MsgId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Filler) GetMsg() *VCBCFinal {
	if x != nil {
		return x.Msg
	}
	return nil
}

type Agreement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance *MsgId      `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	Msg      *CobaltABBA `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *Agreement) Reset() {
	*x = Agreement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleapb_aleapb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Agreement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Agreement) ProtoMessage() {}

func (x *Agreement) ProtoReflect() protoreflect.Message {
	mi := &file_aleapb_aleapb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Agreement.ProtoReflect.Descriptor instead.
func (*Agreement) Descriptor() ([]byte, []int) {
	return file_aleapb_aleapb_proto_rawDescGZIP(), []int{8}
}

func (x *Agreement) GetInstance() *MsgId {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *Agreement) GetMsg() *CobaltABBA {
	if x != nil {
		return x.Msg
	}
	return nil
}

type CobaltABBA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*CobaltABBA_Init
	//	*CobaltABBA_Finish
	//	*CobaltABBA_Aux
	//	*CobaltABBA_Conf
	//	*CobaltABBA_CoinShare
	Type isCobaltABBA_Type `protobuf_oneof:"type"`
}

func (x *CobaltABBA) Reset() {
	*x = CobaltABBA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleapb_aleapb_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CobaltABBA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CobaltABBA) ProtoMessage() {}

func (x *CobaltABBA) ProtoReflect() protoreflect.Message {
	mi := &file_aleapb_aleapb_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CobaltABBA.ProtoReflect.Descriptor instead.
func (*CobaltABBA) Descriptor() ([]byte, []int) {
	return file_aleapb_aleapb_proto_rawDescGZIP(), []int{9}
}

func (m *CobaltABBA) GetType() isCobaltABBA_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *CobaltABBA) GetInit() *CobaltInit {
	if x, ok := x.GetType().(*CobaltABBA_Init); ok {
		return x.Init
	}
	return nil
}

func (x *CobaltABBA) GetFinish() *CobaltFinish {
	if x, ok := x.GetType().(*CobaltABBA_Finish); ok {
		return x.Finish
	}
	return nil
}

func (x *CobaltABBA) GetAux() *CobaltAux {
	if x, ok := x.GetType().(*CobaltABBA_Aux); ok {
		return x.Aux
	}
	return nil
}

func (x *CobaltABBA) GetConf() *CobaltConf {
	if x, ok := x.GetType().(*CobaltABBA_Conf); ok {
		return x.Conf
	}
	return nil
}

func (x *CobaltABBA) GetCoinShare() *CobaltCoinShare {
	if x, ok := x.GetType().(*CobaltABBA_CoinShare); ok {
		return x.CoinShare
	}
	return nil
}

type isCobaltABBA_Type interface {
	isCobaltABBA_Type()
}

type CobaltABBA_Init struct {
	Init *CobaltInit `protobuf:"bytes,2,opt,name=init,proto3,oneof"`
}

type CobaltABBA_Finish struct {
	Finish *CobaltFinish `protobuf:"bytes,3,opt,name=finish,proto3,oneof"`
}

type CobaltABBA_Aux struct {
	Aux *CobaltAux `protobuf:"bytes,4,opt,name=aux,proto3,oneof"`
}

type CobaltABBA_Conf struct {
	Conf *CobaltConf `protobuf:"bytes,5,opt,name=conf,proto3,oneof"`
}

type CobaltABBA_CoinShare struct {
	CoinShare *CobaltCoinShare `protobuf:"bytes,6,opt,name=coinShare,proto3,oneof"`
}

func (*CobaltABBA_Init) isCobaltABBA_Type() {}

func (*CobaltABBA_Finish) isCobaltABBA_Type() {}

func (*CobaltABBA_Aux) isCobaltABBA_Type() {}

func (*CobaltABBA_Conf) isCobaltABBA_Type() {}

func (*CobaltABBA_CoinShare) isCobaltABBA_Type() {}

type CobaltInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Round uint64 `protobuf:"varint,1,opt,name=round,proto3" json:"round,omitempty"`
	Value bool   `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CobaltInit) Reset() {
	*x = CobaltInit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleapb_aleapb_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CobaltInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CobaltInit) ProtoMessage() {}

func (x *CobaltInit) ProtoReflect() protoreflect.Message {
	mi := &file_aleapb_aleapb_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CobaltInit.ProtoReflect.Descriptor instead.
func (*CobaltInit) Descriptor() ([]byte, []int) {
	return file_aleapb_aleapb_proto_rawDescGZIP(), []int{10}
}

func (x *CobaltInit) GetRound() uint64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *CobaltInit) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type CobaltFinish struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CobaltFinish) Reset() {
	*x = CobaltFinish{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleapb_aleapb_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CobaltFinish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CobaltFinish) ProtoMessage() {}

func (x *CobaltFinish) ProtoReflect() protoreflect.Message {
	mi := &file_aleapb_aleapb_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CobaltFinish.ProtoReflect.Descriptor instead.
func (*CobaltFinish) Descriptor() ([]byte, []int) {
	return file_aleapb_aleapb_proto_rawDescGZIP(), []int{11}
}

func (x *CobaltFinish) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type CobaltAux struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Round uint64 `protobuf:"varint,1,opt,name=round,proto3" json:"round,omitempty"`
	Value bool   `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CobaltAux) Reset() {
	*x = CobaltAux{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleapb_aleapb_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CobaltAux) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CobaltAux) ProtoMessage() {}

func (x *CobaltAux) ProtoReflect() protoreflect.Message {
	mi := &file_aleapb_aleapb_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CobaltAux.ProtoReflect.Descriptor instead.
func (*CobaltAux) Descriptor() ([]byte, []int) {
	return file_aleapb_aleapb_proto_rawDescGZIP(), []int{12}
}

func (x *CobaltAux) GetRound() uint64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *CobaltAux) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type CobaltConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Round  uint64         `protobuf:"varint,1,opt,name=round,proto3" json:"round,omitempty"`
	Config CobaltValueSet `protobuf:"varint,2,opt,name=config,proto3,enum=aleapb.CobaltValueSet" json:"config,omitempty"`
}

func (x *CobaltConf) Reset() {
	*x = CobaltConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleapb_aleapb_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CobaltConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CobaltConf) ProtoMessage() {}

func (x *CobaltConf) ProtoReflect() protoreflect.Message {
	mi := &file_aleapb_aleapb_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CobaltConf.ProtoReflect.Descriptor instead.
func (*CobaltConf) Descriptor() ([]byte, []int) {
	return file_aleapb_aleapb_proto_rawDescGZIP(), []int{13}
}

func (x *CobaltConf) GetRound() uint64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *CobaltConf) GetConfig() CobaltValueSet {
	if x != nil {
		return x.Config
	}
	return CobaltValueSet_EMPTY
}

type CobaltCoinShare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Round     uint64 `protobuf:"varint,1,opt,name=round,proto3" json:"round,omitempty"`
	CoinShare []byte `protobuf:"bytes,2,opt,name=coin_share,json=coinShare,proto3" json:"coin_share,omitempty"`
}

func (x *CobaltCoinShare) Reset() {
	*x = CobaltCoinShare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleapb_aleapb_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CobaltCoinShare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CobaltCoinShare) ProtoMessage() {}

func (x *CobaltCoinShare) ProtoReflect() protoreflect.Message {
	mi := &file_aleapb_aleapb_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CobaltCoinShare.ProtoReflect.Descriptor instead.
func (*CobaltCoinShare) Descriptor() ([]byte, []int) {
	return file_aleapb_aleapb_proto_rawDescGZIP(), []int{14}
}

func (x *CobaltCoinShare) GetRound() uint64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *CobaltCoinShare) GetCoinShare() []byte {
	if x != nil {
		return x.CoinShare
	}
	return nil
}

type AleaEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*AleaEvent_VcbcDeliver
	//	*AleaEvent_AbaDeliver
	Type isAleaEvent_Type `protobuf_oneof:"type"`
}

func (x *AleaEvent) Reset() {
	*x = AleaEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleapb_aleapb_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AleaEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AleaEvent) ProtoMessage() {}

func (x *AleaEvent) ProtoReflect() protoreflect.Message {
	mi := &file_aleapb_aleapb_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AleaEvent.ProtoReflect.Descriptor instead.
func (*AleaEvent) Descriptor() ([]byte, []int) {
	return file_aleapb_aleapb_proto_rawDescGZIP(), []int{15}
}

func (m *AleaEvent) GetType() isAleaEvent_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *AleaEvent) GetVcbcDeliver() *VCBCDeliver {
	if x, ok := x.GetType().(*AleaEvent_VcbcDeliver); ok {
		return x.VcbcDeliver
	}
	return nil
}

func (x *AleaEvent) GetAbaDeliver() *CobaltABBADeliver {
	if x, ok := x.GetType().(*AleaEvent_AbaDeliver); ok {
		return x.AbaDeliver
	}
	return nil
}

type isAleaEvent_Type interface {
	isAleaEvent_Type()
}

type AleaEvent_VcbcDeliver struct {
	VcbcDeliver *VCBCDeliver `protobuf:"bytes,1,opt,name=vcbc_deliver,json=vcbcDeliver,proto3,oneof"`
}

type AleaEvent_AbaDeliver struct {
	AbaDeliver *CobaltABBADeliver `protobuf:"bytes,2,opt,name=aba_deliver,json=abaDeliver,proto3,oneof"`
}

func (*AleaEvent_VcbcDeliver) isAleaEvent_Type() {}

func (*AleaEvent_AbaDeliver) isAleaEvent_Type() {}

type VCBCDeliver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *MsgId           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Payload *requestpb.Batch `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *VCBCDeliver) Reset() {
	*x = VCBCDeliver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleapb_aleapb_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCBCDeliver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCBCDeliver) ProtoMessage() {}

func (x *VCBCDeliver) ProtoReflect() protoreflect.Message {
	mi := &file_aleapb_aleapb_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCBCDeliver.ProtoReflect.Descriptor instead.
func (*VCBCDeliver) Descriptor() ([]byte, []int) {
	return file_aleapb_aleapb_proto_rawDescGZIP(), []int{16}
}

func (x *VCBCDeliver) GetId() *MsgId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *VCBCDeliver) GetPayload() *requestpb.Batch {
	if x != nil {
		return x.Payload
	}
	return nil
}

type CobaltABBADeliver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *MsgId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Result bool   `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CobaltABBADeliver) Reset() {
	*x = CobaltABBADeliver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleapb_aleapb_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CobaltABBADeliver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CobaltABBADeliver) ProtoMessage() {}

func (x *CobaltABBADeliver) ProtoReflect() protoreflect.Message {
	mi := &file_aleapb_aleapb_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CobaltABBADeliver.ProtoReflect.Descriptor instead.
func (*CobaltABBADeliver) Descriptor() ([]byte, []int) {
	return file_aleapb_aleapb_proto_rawDescGZIP(), []int{17}
}

func (x *CobaltABBADeliver) GetId() *MsgId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CobaltABBADeliver) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

var File_aleapb_aleapb_proto protoreflect.FileDescriptor

var file_aleapb_aleapb_proto_rawDesc = []byte{
	0x0a, 0x13, 0x61, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x2f, 0x61, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x61, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x1a, 0x19, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc3, 0x01, 0x0a, 0x0b, 0x41, 0x6c, 0x65,
	0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x76, 0x63, 0x62, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x2e,
	0x56, 0x43, 0x42, 0x43, 0x48, 0x00, 0x52, 0x04, 0x76, 0x63, 0x62, 0x63, 0x12, 0x31, 0x0a, 0x09,
	0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x61, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x2e, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x2b, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x6c, 0x47, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x61, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x47, 0x61,
	0x70, 0x48, 0x00, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x6c, 0x47, 0x61, 0x70, 0x12, 0x28, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61,
	0x6c, 0x65, 0x61, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x38,
	0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x49, 0x64, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x22, 0xb4, 0x01, 0x0a, 0x04, 0x56, 0x43, 0x42,
	0x43, 0x12, 0x29, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x2e, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x04,
	0x73, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x6c, 0x65,
	0x61, 0x70, 0x62, 0x2e, 0x56, 0x43, 0x42, 0x43, 0x53, 0x65, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x04,
	0x73, 0x65, 0x6e, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x65, 0x63, 0x68, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x2e, 0x56, 0x43, 0x42, 0x43,
	0x45, 0x63, 0x68, 0x6f, 0x48, 0x00, 0x52, 0x04, 0x65, 0x63, 0x68, 0x6f, 0x12, 0x29, 0x0a, 0x05,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x6c,
	0x65, 0x61, 0x70, 0x62, 0x2e, 0x56, 0x43, 0x42, 0x43, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x48, 0x00,
	0x52, 0x05, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x36, 0x0a, 0x08, 0x56, 0x43, 0x42, 0x43, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x5f, 0x0a, 0x08, 0x56, 0x43, 0x42, 0x43, 0x45,
	0x63, 0x68, 0x6f, 0x12, 0x2a, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x70, 0x62,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x22, 0x55, 0x0a, 0x09, 0x56, 0x43, 0x42, 0x43,
	0x46, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22,
	0x28, 0x0a, 0x07, 0x46, 0x69, 0x6c, 0x6c, 0x47, 0x61, 0x70, 0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x2e,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4c, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x6c, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x61, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x2e, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x23, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x61, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x2e, 0x56, 0x43, 0x42, 0x43, 0x46, 0x69, 0x6e,
	0x61, 0x6c, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x5c, 0x0a, 0x09, 0x41, 0x67, 0x72, 0x65, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x2e,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x24, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61,
	0x6c, 0x65, 0x61, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x41, 0x42, 0x42, 0x41,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xf8, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x62, 0x61, 0x6c, 0x74,
	0x41, 0x42, 0x42, 0x41, 0x12, 0x28, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x62, 0x61,
	0x6c, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x12, 0x2e,
	0x0a, 0x06, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x61, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x48, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x25,
	0x0a, 0x03, 0x61, 0x75, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x6c,
	0x65, 0x61, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x41, 0x75, 0x78, 0x48, 0x00,
	0x52, 0x03, 0x61, 0x75, 0x78, 0x12, 0x28, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x62,
	0x61, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x66, 0x12,
	0x37, 0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x62, 0x61,
	0x6c, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x48, 0x00, 0x52, 0x09, 0x63,
	0x6f, 0x69, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x38, 0x0a, 0x0a, 0x43, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x24, 0x0a, 0x0c, 0x43, 0x6f,
	0x62, 0x61, 0x6c, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x37, 0x0a, 0x09, 0x43, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x41, 0x75, 0x78, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x52, 0x0a, 0x0a, 0x43, 0x6f, 0x62,
	0x61, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2e, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x61, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x46, 0x0a,
	0x0f, 0x43, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x6f, 0x69, 0x6e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x09, 0x41, 0x6c, 0x65, 0x61, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0c, 0x76, 0x63, 0x62, 0x63, 0x5f, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x6c, 0x65, 0x61,
	0x70, 0x62, 0x2e, 0x56, 0x43, 0x42, 0x43, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x0b, 0x76, 0x63, 0x62, 0x63, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x12, 0x3c, 0x0a,
	0x0b, 0x61, 0x62, 0x61, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x62, 0x61,
	0x6c, 0x74, 0x41, 0x42, 0x42, 0x41, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x0a, 0x61, 0x62, 0x61, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x58, 0x0a, 0x0b, 0x56, 0x43, 0x42, 0x43, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x61, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x2e, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x2a, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x4a, 0x0a,
	0x11, 0x43, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x41, 0x42, 0x42, 0x41, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x61, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x2e, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2a, 0x40, 0x0a, 0x0e, 0x43, 0x6f, 0x62,
	0x61, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x4d, 0x50, 0x54, 0x59, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x01,
	0x12, 0x07, 0x0a, 0x03, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x5a, 0x45, 0x52,
	0x4f, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x42, 0x2f, 0x5a, 0x2d, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x6f,
	0x69, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6d, 0x69, 0x72, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x70, 0x62, 0x2f, 0x61, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_aleapb_aleapb_proto_rawDescOnce sync.Once
	file_aleapb_aleapb_proto_rawDescData = file_aleapb_aleapb_proto_rawDesc
)

func file_aleapb_aleapb_proto_rawDescGZIP() []byte {
	file_aleapb_aleapb_proto_rawDescOnce.Do(func() {
		file_aleapb_aleapb_proto_rawDescData = protoimpl.X.CompressGZIP(file_aleapb_aleapb_proto_rawDescData)
	})
	return file_aleapb_aleapb_proto_rawDescData
}

var file_aleapb_aleapb_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_aleapb_aleapb_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_aleapb_aleapb_proto_goTypes = []interface{}{
	(CobaltValueSet)(0),       // 0: aleapb.CobaltValueSet
	(*AleaMessage)(nil),       // 1: aleapb.AleaMessage
	(*MsgId)(nil),             // 2: aleapb.MsgId
	(*VCBC)(nil),              // 3: aleapb.VCBC
	(*VCBCSend)(nil),          // 4: aleapb.VCBCSend
	(*VCBCEcho)(nil),          // 5: aleapb.VCBCEcho
	(*VCBCFinal)(nil),         // 6: aleapb.VCBCFinal
	(*FillGap)(nil),           // 7: aleapb.FillGap
	(*Filler)(nil),            // 8: aleapb.Filler
	(*Agreement)(nil),         // 9: aleapb.Agreement
	(*CobaltABBA)(nil),        // 10: aleapb.CobaltABBA
	(*CobaltInit)(nil),        // 11: aleapb.CobaltInit
	(*CobaltFinish)(nil),      // 12: aleapb.CobaltFinish
	(*CobaltAux)(nil),         // 13: aleapb.CobaltAux
	(*CobaltConf)(nil),        // 14: aleapb.CobaltConf
	(*CobaltCoinShare)(nil),   // 15: aleapb.CobaltCoinShare
	(*AleaEvent)(nil),         // 16: aleapb.AleaEvent
	(*VCBCDeliver)(nil),       // 17: aleapb.VCBCDeliver
	(*CobaltABBADeliver)(nil), // 18: aleapb.CobaltABBADeliver
	(*requestpb.Batch)(nil),   // 19: requestpb.Batch
}
var file_aleapb_aleapb_proto_depIdxs = []int32{
	3,  // 0: aleapb.AleaMessage.vcbc:type_name -> aleapb.VCBC
	9,  // 1: aleapb.AleaMessage.agreement:type_name -> aleapb.Agreement
	7,  // 2: aleapb.AleaMessage.fillGap:type_name -> aleapb.FillGap
	8,  // 3: aleapb.AleaMessage.filler:type_name -> aleapb.Filler
	2,  // 4: aleapb.VCBC.instance:type_name -> aleapb.MsgId
	4,  // 5: aleapb.VCBC.send:type_name -> aleapb.VCBCSend
	5,  // 6: aleapb.VCBC.echo:type_name -> aleapb.VCBCEcho
	6,  // 7: aleapb.VCBC.final:type_name -> aleapb.VCBCFinal
	19, // 8: aleapb.VCBCSend.payload:type_name -> requestpb.Batch
	19, // 9: aleapb.VCBCEcho.payload:type_name -> requestpb.Batch
	19, // 10: aleapb.VCBCFinal.payload:type_name -> requestpb.Batch
	2,  // 11: aleapb.FillGap.id:type_name -> aleapb.MsgId
	2,  // 12: aleapb.Filler.id:type_name -> aleapb.MsgId
	6,  // 13: aleapb.Filler.msg:type_name -> aleapb.VCBCFinal
	2,  // 14: aleapb.Agreement.instance:type_name -> aleapb.MsgId
	10, // 15: aleapb.Agreement.msg:type_name -> aleapb.CobaltABBA
	11, // 16: aleapb.CobaltABBA.init:type_name -> aleapb.CobaltInit
	12, // 17: aleapb.CobaltABBA.finish:type_name -> aleapb.CobaltFinish
	13, // 18: aleapb.CobaltABBA.aux:type_name -> aleapb.CobaltAux
	14, // 19: aleapb.CobaltABBA.conf:type_name -> aleapb.CobaltConf
	15, // 20: aleapb.CobaltABBA.coinShare:type_name -> aleapb.CobaltCoinShare
	0,  // 21: aleapb.CobaltConf.config:type_name -> aleapb.CobaltValueSet
	17, // 22: aleapb.AleaEvent.vcbc_deliver:type_name -> aleapb.VCBCDeliver
	18, // 23: aleapb.AleaEvent.aba_deliver:type_name -> aleapb.CobaltABBADeliver
	2,  // 24: aleapb.VCBCDeliver.id:type_name -> aleapb.MsgId
	19, // 25: aleapb.VCBCDeliver.payload:type_name -> requestpb.Batch
	2,  // 26: aleapb.CobaltABBADeliver.id:type_name -> aleapb.MsgId
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_aleapb_aleapb_proto_init() }
func file_aleapb_aleapb_proto_init() {
	if File_aleapb_aleapb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_aleapb_aleapb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AleaMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleapb_aleapb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleapb_aleapb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCBC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleapb_aleapb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCBCSend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleapb_aleapb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCBCEcho); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleapb_aleapb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCBCFinal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleapb_aleapb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FillGap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleapb_aleapb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleapb_aleapb_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Agreement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleapb_aleapb_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CobaltABBA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleapb_aleapb_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CobaltInit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleapb_aleapb_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CobaltFinish); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleapb_aleapb_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CobaltAux); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleapb_aleapb_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CobaltConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleapb_aleapb_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CobaltCoinShare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleapb_aleapb_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AleaEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleapb_aleapb_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCBCDeliver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleapb_aleapb_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CobaltABBADeliver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_aleapb_aleapb_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*AleaMessage_Vcbc)(nil),
		(*AleaMessage_Agreement)(nil),
		(*AleaMessage_FillGap)(nil),
		(*AleaMessage_Filler)(nil),
	}
	file_aleapb_aleapb_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*VCBC_Send)(nil),
		(*VCBC_Echo)(nil),
		(*VCBC_Final)(nil),
	}
	file_aleapb_aleapb_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*CobaltABBA_Init)(nil),
		(*CobaltABBA_Finish)(nil),
		(*CobaltABBA_Aux)(nil),
		(*CobaltABBA_Conf)(nil),
		(*CobaltABBA_CoinShare)(nil),
	}
	file_aleapb_aleapb_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*AleaEvent_VcbcDeliver)(nil),
		(*AleaEvent_AbaDeliver)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aleapb_aleapb_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_aleapb_aleapb_proto_goTypes,
		DependencyIndexes: file_aleapb_aleapb_proto_depIdxs,
		EnumInfos:         file_aleapb_aleapb_proto_enumTypes,
		MessageInfos:      file_aleapb_aleapb_proto_msgTypes,
	}.Build()
	File_aleapb_aleapb_proto = out.File
	file_aleapb_aleapb_proto_rawDesc = nil
	file_aleapb_aleapb_proto_goTypes = nil
	file_aleapb_aleapb_proto_depIdxs = nil
}
