// Code generated by Mir codegen. DO NOT EDIT.

package threshchkpvalidatorpbtypes

import (
	mirreflect "github.com/filecoin-project/mir/codegen/mirreflect"
	types3 "github.com/filecoin-project/mir/codegen/model/types"
	types5 "github.com/filecoin-project/mir/pkg/pb/contextstorepb/types"
	types6 "github.com/filecoin-project/mir/pkg/pb/dslpb/types"
	threshchkpvalidatorpb "github.com/filecoin-project/mir/pkg/pb/threshcheckpointpb/threshchkpvalidatorpb"
	types "github.com/filecoin-project/mir/pkg/pb/threshcheckpointpb/types"
	trantorpb "github.com/filecoin-project/mir/pkg/pb/trantorpb"
	types2 "github.com/filecoin-project/mir/pkg/pb/trantorpb/types"
	types1 "github.com/filecoin-project/mir/pkg/trantor/types"
	types4 "github.com/filecoin-project/mir/pkg/types"
	reflectutil "github.com/filecoin-project/mir/pkg/util/reflectutil"
)

type Event struct {
	Type Event_Type
}

type Event_Type interface {
	mirreflect.GeneratedType
	isEvent_Type()
	Pb() threshchkpvalidatorpb.Event_Type
}

type Event_TypeWrapper[T any] interface {
	Event_Type
	Unwrap() *T
}

func Event_TypeFromPb(pb threshchkpvalidatorpb.Event_Type) Event_Type {
	if pb == nil {
		return nil
	}
	switch pb := pb.(type) {
	case *threshchkpvalidatorpb.Event_ValidateCheckpoint:
		return &Event_ValidateCheckpoint{ValidateCheckpoint: ValidateCheckpointFromPb(pb.ValidateCheckpoint)}
	case *threshchkpvalidatorpb.Event_CheckpointValidated:
		return &Event_CheckpointValidated{CheckpointValidated: CheckpointValidatedFromPb(pb.CheckpointValidated)}
	}
	return nil
}

type Event_ValidateCheckpoint struct {
	ValidateCheckpoint *ValidateCheckpoint
}

func (*Event_ValidateCheckpoint) isEvent_Type() {}

func (w *Event_ValidateCheckpoint) Unwrap() *ValidateCheckpoint {
	return w.ValidateCheckpoint
}

func (w *Event_ValidateCheckpoint) Pb() threshchkpvalidatorpb.Event_Type {
	if w == nil {
		return nil
	}
	if w.ValidateCheckpoint == nil {
		return &threshchkpvalidatorpb.Event_ValidateCheckpoint{}
	}
	return &threshchkpvalidatorpb.Event_ValidateCheckpoint{ValidateCheckpoint: (w.ValidateCheckpoint).Pb()}
}

func (*Event_ValidateCheckpoint) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*threshchkpvalidatorpb.Event_ValidateCheckpoint]()}
}

type Event_CheckpointValidated struct {
	CheckpointValidated *CheckpointValidated
}

func (*Event_CheckpointValidated) isEvent_Type() {}

func (w *Event_CheckpointValidated) Unwrap() *CheckpointValidated {
	return w.CheckpointValidated
}

func (w *Event_CheckpointValidated) Pb() threshchkpvalidatorpb.Event_Type {
	if w == nil {
		return nil
	}
	if w.CheckpointValidated == nil {
		return &threshchkpvalidatorpb.Event_CheckpointValidated{}
	}
	return &threshchkpvalidatorpb.Event_CheckpointValidated{CheckpointValidated: (w.CheckpointValidated).Pb()}
}

func (*Event_CheckpointValidated) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*threshchkpvalidatorpb.Event_CheckpointValidated]()}
}

func EventFromPb(pb *threshchkpvalidatorpb.Event) *Event {
	if pb == nil {
		return nil
	}
	return &Event{
		Type: Event_TypeFromPb(pb.Type),
	}
}

func (m *Event) Pb() *threshchkpvalidatorpb.Event {
	if m == nil {
		return nil
	}
	pbMessage := &threshchkpvalidatorpb.Event{}
	{
		if m.Type != nil {
			pbMessage.Type = (m.Type).Pb()
		}
	}

	return pbMessage
}

func (*Event) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*threshchkpvalidatorpb.Event]()}
}

type ValidateCheckpoint struct {
	Checkpoint  *types.StableCheckpoint
	EpochNr     types1.EpochNr
	Memberships []*types2.Membership
	Origin      *ValidateChkpOrigin
}

func ValidateCheckpointFromPb(pb *threshchkpvalidatorpb.ValidateCheckpoint) *ValidateCheckpoint {
	if pb == nil {
		return nil
	}
	return &ValidateCheckpoint{
		Checkpoint: types.StableCheckpointFromPb(pb.Checkpoint),
		EpochNr:    (types1.EpochNr)(pb.EpochNr),
		Memberships: types3.ConvertSlice(pb.Memberships, func(t *trantorpb.Membership) *types2.Membership {
			return types2.MembershipFromPb(t)
		}),
		Origin: ValidateChkpOriginFromPb(pb.Origin),
	}
}

func (m *ValidateCheckpoint) Pb() *threshchkpvalidatorpb.ValidateCheckpoint {
	if m == nil {
		return nil
	}
	pbMessage := &threshchkpvalidatorpb.ValidateCheckpoint{}
	{
		if m.Checkpoint != nil {
			pbMessage.Checkpoint = (m.Checkpoint).Pb()
		}
		pbMessage.EpochNr = (uint64)(m.EpochNr)
		pbMessage.Memberships = types3.ConvertSlice(m.Memberships, func(t *types2.Membership) *trantorpb.Membership {
			return (t).Pb()
		})
		if m.Origin != nil {
			pbMessage.Origin = (m.Origin).Pb()
		}
	}

	return pbMessage
}

func (*ValidateCheckpoint) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*threshchkpvalidatorpb.ValidateCheckpoint]()}
}

type CheckpointValidated struct {
	Error  error
	Origin *ValidateChkpOrigin
}

func CheckpointValidatedFromPb(pb *threshchkpvalidatorpb.CheckpointValidated) *CheckpointValidated {
	if pb == nil {
		return nil
	}
	return &CheckpointValidated{
		Error:  types3.StringToError(pb.Error),
		Origin: ValidateChkpOriginFromPb(pb.Origin),
	}
}

func (m *CheckpointValidated) Pb() *threshchkpvalidatorpb.CheckpointValidated {
	if m == nil {
		return nil
	}
	pbMessage := &threshchkpvalidatorpb.CheckpointValidated{}
	{
		pbMessage.Error = types3.ErrorToString(m.Error)
		if m.Origin != nil {
			pbMessage.Origin = (m.Origin).Pb()
		}
	}

	return pbMessage
}

func (*CheckpointValidated) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*threshchkpvalidatorpb.CheckpointValidated]()}
}

type ValidateChkpOrigin struct {
	Module types4.ModuleID
	Type   ValidateChkpOrigin_Type
}

type ValidateChkpOrigin_Type interface {
	mirreflect.GeneratedType
	isValidateChkpOrigin_Type()
	Pb() threshchkpvalidatorpb.ValidateChkpOrigin_Type
}

type ValidateChkpOrigin_TypeWrapper[T any] interface {
	ValidateChkpOrigin_Type
	Unwrap() *T
}

func ValidateChkpOrigin_TypeFromPb(pb threshchkpvalidatorpb.ValidateChkpOrigin_Type) ValidateChkpOrigin_Type {
	if pb == nil {
		return nil
	}
	switch pb := pb.(type) {
	case *threshchkpvalidatorpb.ValidateChkpOrigin_ContextStore:
		return &ValidateChkpOrigin_ContextStore{ContextStore: types5.OriginFromPb(pb.ContextStore)}
	case *threshchkpvalidatorpb.ValidateChkpOrigin_Dsl:
		return &ValidateChkpOrigin_Dsl{Dsl: types6.OriginFromPb(pb.Dsl)}
	}
	return nil
}

type ValidateChkpOrigin_ContextStore struct {
	ContextStore *types5.Origin
}

func (*ValidateChkpOrigin_ContextStore) isValidateChkpOrigin_Type() {}

func (w *ValidateChkpOrigin_ContextStore) Unwrap() *types5.Origin {
	return w.ContextStore
}

func (w *ValidateChkpOrigin_ContextStore) Pb() threshchkpvalidatorpb.ValidateChkpOrigin_Type {
	if w == nil {
		return nil
	}
	if w.ContextStore == nil {
		return &threshchkpvalidatorpb.ValidateChkpOrigin_ContextStore{}
	}
	return &threshchkpvalidatorpb.ValidateChkpOrigin_ContextStore{ContextStore: (w.ContextStore).Pb()}
}

func (*ValidateChkpOrigin_ContextStore) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*threshchkpvalidatorpb.ValidateChkpOrigin_ContextStore]()}
}

type ValidateChkpOrigin_Dsl struct {
	Dsl *types6.Origin
}

func (*ValidateChkpOrigin_Dsl) isValidateChkpOrigin_Type() {}

func (w *ValidateChkpOrigin_Dsl) Unwrap() *types6.Origin {
	return w.Dsl
}

func (w *ValidateChkpOrigin_Dsl) Pb() threshchkpvalidatorpb.ValidateChkpOrigin_Type {
	if w == nil {
		return nil
	}
	if w.Dsl == nil {
		return &threshchkpvalidatorpb.ValidateChkpOrigin_Dsl{}
	}
	return &threshchkpvalidatorpb.ValidateChkpOrigin_Dsl{Dsl: (w.Dsl).Pb()}
}

func (*ValidateChkpOrigin_Dsl) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*threshchkpvalidatorpb.ValidateChkpOrigin_Dsl]()}
}

func ValidateChkpOriginFromPb(pb *threshchkpvalidatorpb.ValidateChkpOrigin) *ValidateChkpOrigin {
	if pb == nil {
		return nil
	}
	return &ValidateChkpOrigin{
		Module: (types4.ModuleID)(pb.Module),
		Type:   ValidateChkpOrigin_TypeFromPb(pb.Type),
	}
}

func (m *ValidateChkpOrigin) Pb() *threshchkpvalidatorpb.ValidateChkpOrigin {
	if m == nil {
		return nil
	}
	pbMessage := &threshchkpvalidatorpb.ValidateChkpOrigin{}
	{
		pbMessage.Module = (string)(m.Module)
		if m.Type != nil {
			pbMessage.Type = (m.Type).Pb()
		}
	}

	return pbMessage
}

func (*ValidateChkpOrigin) MirReflect() mirreflect.Type {
	return mirreflect.TypeImpl{PbType_: reflectutil.TypeOf[*threshchkpvalidatorpb.ValidateChkpOrigin]()}
}
