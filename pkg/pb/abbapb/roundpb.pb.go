// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        v3.21.12
// source: abbapb/roundpb.proto

package abbapb

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"

	_ "github.com/filecoin-project/mir/pkg/pb/mir"
	_ "github.com/filecoin-project/mir/pkg/pb/net"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RoundEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*RoundEvent_InputValue
	//	*RoundEvent_Deliver
	//	*RoundEvent_Finish
	Type isRoundEvent_Type `protobuf_oneof:"type"`
}

func (x *RoundEvent) Reset() {
	*x = RoundEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_abbapb_roundpb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundEvent) ProtoMessage() {}

func (x *RoundEvent) ProtoReflect() protoreflect.Message {
	mi := &file_abbapb_roundpb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundEvent.ProtoReflect.Descriptor instead.
func (*RoundEvent) Descriptor() ([]byte, []int) {
	return file_abbapb_roundpb_proto_rawDescGZIP(), []int{0}
}

func (m *RoundEvent) GetType() isRoundEvent_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *RoundEvent) GetInputValue() *RoundInputValue {
	if x, ok := x.GetType().(*RoundEvent_InputValue); ok {
		return x.InputValue
	}
	return nil
}

func (x *RoundEvent) GetDeliver() *RoundDeliver {
	if x, ok := x.GetType().(*RoundEvent_Deliver); ok {
		return x.Deliver
	}
	return nil
}

func (x *RoundEvent) GetFinish() *RoundFinishAll {
	if x, ok := x.GetType().(*RoundEvent_Finish); ok {
		return x.Finish
	}
	return nil
}

type isRoundEvent_Type interface {
	isRoundEvent_Type()
}

type RoundEvent_InputValue struct {
	InputValue *RoundInputValue `protobuf:"bytes,1,opt,name=input_value,json=inputValue,proto3,oneof"`
}

type RoundEvent_Deliver struct {
	Deliver *RoundDeliver `protobuf:"bytes,2,opt,name=deliver,proto3,oneof"`
}

type RoundEvent_Finish struct {
	Finish *RoundFinishAll `protobuf:"bytes,3,opt,name=finish,proto3,oneof"`
}

func (*RoundEvent_InputValue) isRoundEvent_Type() {}

func (*RoundEvent_Deliver) isRoundEvent_Type() {}

func (*RoundEvent_Finish) isRoundEvent_Type() {}

type RoundInputValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input bool `protobuf:"varint,1,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *RoundInputValue) Reset() {
	*x = RoundInputValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_abbapb_roundpb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundInputValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundInputValue) ProtoMessage() {}

func (x *RoundInputValue) ProtoReflect() protoreflect.Message {
	mi := &file_abbapb_roundpb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundInputValue.ProtoReflect.Descriptor instead.
func (*RoundInputValue) Descriptor() ([]byte, []int) {
	return file_abbapb_roundpb_proto_rawDescGZIP(), []int{1}
}

func (x *RoundInputValue) GetInput() bool {
	if x != nil {
		return x.Input
	}
	return false
}

type RoundDeliver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextEstimate bool   `protobuf:"varint,1,opt,name=next_estimate,json=nextEstimate,proto3" json:"next_estimate,omitempty"`
	RoundNumber  uint64 `protobuf:"varint,2,opt,name=round_number,json=roundNumber,proto3" json:"round_number,omitempty"`
}

func (x *RoundDeliver) Reset() {
	*x = RoundDeliver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_abbapb_roundpb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundDeliver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundDeliver) ProtoMessage() {}

func (x *RoundDeliver) ProtoReflect() protoreflect.Message {
	mi := &file_abbapb_roundpb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundDeliver.ProtoReflect.Descriptor instead.
func (*RoundDeliver) Descriptor() ([]byte, []int) {
	return file_abbapb_roundpb_proto_rawDescGZIP(), []int{2}
}

func (x *RoundDeliver) GetNextEstimate() bool {
	if x != nil {
		return x.NextEstimate
	}
	return false
}

func (x *RoundDeliver) GetRoundNumber() uint64 {
	if x != nil {
		return x.RoundNumber
	}
	return 0
}

type RoundFinishAll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Decision  bool `protobuf:"varint,1,opt,name=decision,proto3" json:"decision,omitempty"`
	Unanimous bool `protobuf:"varint,2,opt,name=unanimous,proto3" json:"unanimous,omitempty"` // TODO: split into different message? probably not worth the hassle
}

func (x *RoundFinishAll) Reset() {
	*x = RoundFinishAll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_abbapb_roundpb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundFinishAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundFinishAll) ProtoMessage() {}

func (x *RoundFinishAll) ProtoReflect() protoreflect.Message {
	mi := &file_abbapb_roundpb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundFinishAll.ProtoReflect.Descriptor instead.
func (*RoundFinishAll) Descriptor() ([]byte, []int) {
	return file_abbapb_roundpb_proto_rawDescGZIP(), []int{3}
}

func (x *RoundFinishAll) GetDecision() bool {
	if x != nil {
		return x.Decision
	}
	return false
}

func (x *RoundFinishAll) GetUnanimous() bool {
	if x != nil {
		return x.Unanimous
	}
	return false
}

type RoundMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*RoundMessage_Init
	//	*RoundMessage_Aux
	//	*RoundMessage_Conf
	//	*RoundMessage_Coin
	Type isRoundMessage_Type `protobuf_oneof:"type"`
}

func (x *RoundMessage) Reset() {
	*x = RoundMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_abbapb_roundpb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundMessage) ProtoMessage() {}

func (x *RoundMessage) ProtoReflect() protoreflect.Message {
	mi := &file_abbapb_roundpb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundMessage.ProtoReflect.Descriptor instead.
func (*RoundMessage) Descriptor() ([]byte, []int) {
	return file_abbapb_roundpb_proto_rawDescGZIP(), []int{4}
}

func (m *RoundMessage) GetType() isRoundMessage_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *RoundMessage) GetInit() *RoundInitMessage {
	if x, ok := x.GetType().(*RoundMessage_Init); ok {
		return x.Init
	}
	return nil
}

func (x *RoundMessage) GetAux() *RoundAuxMessage {
	if x, ok := x.GetType().(*RoundMessage_Aux); ok {
		return x.Aux
	}
	return nil
}

func (x *RoundMessage) GetConf() *RoundConfMessage {
	if x, ok := x.GetType().(*RoundMessage_Conf); ok {
		return x.Conf
	}
	return nil
}

func (x *RoundMessage) GetCoin() *RoundCoinMessage {
	if x, ok := x.GetType().(*RoundMessage_Coin); ok {
		return x.Coin
	}
	return nil
}

type isRoundMessage_Type interface {
	isRoundMessage_Type()
}

type RoundMessage_Init struct {
	Init *RoundInitMessage `protobuf:"bytes,1,opt,name=init,proto3,oneof"`
}

type RoundMessage_Aux struct {
	Aux *RoundAuxMessage `protobuf:"bytes,2,opt,name=aux,proto3,oneof"`
}

type RoundMessage_Conf struct {
	Conf *RoundConfMessage `protobuf:"bytes,3,opt,name=conf,proto3,oneof"`
}

type RoundMessage_Coin struct {
	Coin *RoundCoinMessage `protobuf:"bytes,4,opt,name=coin,proto3,oneof"`
}

func (*RoundMessage_Init) isRoundMessage_Type() {}

func (*RoundMessage_Aux) isRoundMessage_Type() {}

func (*RoundMessage_Conf) isRoundMessage_Type() {}

func (*RoundMessage_Coin) isRoundMessage_Type() {}

type RoundInitMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Estimate bool `protobuf:"varint,1,opt,name=estimate,proto3" json:"estimate,omitempty"`
	IsInput  bool `protobuf:"varint,2,opt,name=is_input,json=isInput,proto3" json:"is_input,omitempty"` // won't take space on wire when false, only used in first round for unanimous optimization
}

func (x *RoundInitMessage) Reset() {
	*x = RoundInitMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_abbapb_roundpb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundInitMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundInitMessage) ProtoMessage() {}

func (x *RoundInitMessage) ProtoReflect() protoreflect.Message {
	mi := &file_abbapb_roundpb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundInitMessage.ProtoReflect.Descriptor instead.
func (*RoundInitMessage) Descriptor() ([]byte, []int) {
	return file_abbapb_roundpb_proto_rawDescGZIP(), []int{5}
}

func (x *RoundInitMessage) GetEstimate() bool {
	if x != nil {
		return x.Estimate
	}
	return false
}

func (x *RoundInitMessage) GetIsInput() bool {
	if x != nil {
		return x.IsInput
	}
	return false
}

type RoundAuxMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RoundAuxMessage) Reset() {
	*x = RoundAuxMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_abbapb_roundpb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundAuxMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundAuxMessage) ProtoMessage() {}

func (x *RoundAuxMessage) ProtoReflect() protoreflect.Message {
	mi := &file_abbapb_roundpb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundAuxMessage.ProtoReflect.Descriptor instead.
func (*RoundAuxMessage) Descriptor() ([]byte, []int) {
	return file_abbapb_roundpb_proto_rawDescGZIP(), []int{6}
}

func (x *RoundAuxMessage) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type RoundConfMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values uint32 `protobuf:"varint,1,opt,name=values,proto3" json:"values,omitempty"`
}

func (x *RoundConfMessage) Reset() {
	*x = RoundConfMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_abbapb_roundpb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundConfMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundConfMessage) ProtoMessage() {}

func (x *RoundConfMessage) ProtoReflect() protoreflect.Message {
	mi := &file_abbapb_roundpb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundConfMessage.ProtoReflect.Descriptor instead.
func (*RoundConfMessage) Descriptor() ([]byte, []int) {
	return file_abbapb_roundpb_proto_rawDescGZIP(), []int{7}
}

func (x *RoundConfMessage) GetValues() uint32 {
	if x != nil {
		return x.Values
	}
	return 0
}

type RoundCoinMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinShare []byte `protobuf:"bytes,1,opt,name=coin_share,json=coinShare,proto3" json:"coin_share,omitempty"`
}

func (x *RoundCoinMessage) Reset() {
	*x = RoundCoinMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_abbapb_roundpb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundCoinMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundCoinMessage) ProtoMessage() {}

func (x *RoundCoinMessage) ProtoReflect() protoreflect.Message {
	mi := &file_abbapb_roundpb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundCoinMessage.ProtoReflect.Descriptor instead.
func (*RoundCoinMessage) Descriptor() ([]byte, []int) {
	return file_abbapb_roundpb_proto_rawDescGZIP(), []int{8}
}

func (x *RoundCoinMessage) GetCoinShare() []byte {
	if x != nil {
		return x.CoinShare
	}
	return nil
}

var File_abbapb_roundpb_proto protoreflect.FileDescriptor

var file_abbapb_roundpb_proto_rawDesc = []byte{
	0x0a, 0x14, 0x61, 0x62, 0x62, 0x61, 0x70, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x70, 0x62,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x61, 0x62, 0x62, 0x61, 0x70, 0x62, 0x1a, 0x1c,
	0x6d, 0x69, 0x72, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6e, 0x65,
	0x74, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc4, 0x01, 0x0a, 0x0a, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x61, 0x62, 0x62, 0x61, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x62, 0x62, 0x61, 0x70, 0x62, 0x2e,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x06, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x62, 0x62, 0x61, 0x70, 0x62,
	0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x41, 0x6c, 0x6c, 0x48,
	0x00, 0x52, 0x06, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x3a, 0x08, 0x90, 0xa6, 0x1d, 0x01, 0x98,
	0xa6, 0x1d, 0x01, 0x42, 0x0c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x04, 0x80, 0xa6, 0x1d,
	0x01, 0x22, 0x2d, 0x0a, 0x0f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x04, 0x98, 0xa6, 0x1d, 0x01,
	0x22, 0x5c, 0x0a, 0x0c, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x45, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x3a, 0x04, 0x98, 0xa6, 0x1d, 0x01, 0x22, 0x50,
	0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x41, 0x6c, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x75, 0x6e, 0x61, 0x6e, 0x69, 0x6d, 0x6f, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x75, 0x6e, 0x61, 0x6e, 0x69, 0x6d, 0x6f, 0x75, 0x73, 0x3a, 0x04, 0x98, 0xa6, 0x1d, 0x01,
	0x22, 0xdf, 0x01, 0x0a, 0x0c, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2e, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x61, 0x62, 0x62, 0x61, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e,
	0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x69,
	0x74, 0x12, 0x2b, 0x0a, 0x03, 0x61, 0x75, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x61, 0x62, 0x62, 0x61, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x75, 0x78,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x03, 0x61, 0x75, 0x78, 0x12, 0x2e,
	0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61,
	0x62, 0x62, 0x61, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x66, 0x12, 0x2e,
	0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61,
	0x62, 0x62, 0x61, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x3a, 0x04,
	0xc8, 0xe4, 0x1d, 0x01, 0x42, 0x0c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x04, 0xc8, 0xe4,
	0x1d, 0x01, 0x22, 0x4f, 0x0a, 0x10, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x04, 0xd0,
	0xe4, 0x1d, 0x01, 0x22, 0x2d, 0x0a, 0x0f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x75, 0x78, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x04, 0xd0, 0xe4,
	0x1d, 0x01, 0x22, 0x71, 0x0a, 0x10, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x57, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x3f, 0x82, 0xa6, 0x1d, 0x3b, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x2d,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6d, 0x69, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x61, 0x62, 0x62, 0x61, 0x2f, 0x61, 0x62, 0x62, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x3a,
	0x04, 0xd0, 0xe4, 0x1d, 0x01, 0x22, 0x7e, 0x0a, 0x10, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f,
	0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x64, 0x0a, 0x0a, 0x63, 0x6f, 0x69,
	0x6e, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x45, 0x82,
	0xa6, 0x1d, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69,
	0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6d,
	0x69, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x2f, 0x74, 0x63, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x3a,
	0x04, 0xd0, 0xe4, 0x1d, 0x01, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6d, 0x69, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0x2f,
	0x61, 0x62, 0x62, 0x61, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_abbapb_roundpb_proto_rawDescOnce sync.Once
	file_abbapb_roundpb_proto_rawDescData = file_abbapb_roundpb_proto_rawDesc
)

func file_abbapb_roundpb_proto_rawDescGZIP() []byte {
	file_abbapb_roundpb_proto_rawDescOnce.Do(func() {
		file_abbapb_roundpb_proto_rawDescData = protoimpl.X.CompressGZIP(file_abbapb_roundpb_proto_rawDescData)
	})
	return file_abbapb_roundpb_proto_rawDescData
}

var file_abbapb_roundpb_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_abbapb_roundpb_proto_goTypes = []interface{}{
	(*RoundEvent)(nil),       // 0: abbapb.RoundEvent
	(*RoundInputValue)(nil),  // 1: abbapb.RoundInputValue
	(*RoundDeliver)(nil),     // 2: abbapb.RoundDeliver
	(*RoundFinishAll)(nil),   // 3: abbapb.RoundFinishAll
	(*RoundMessage)(nil),     // 4: abbapb.RoundMessage
	(*RoundInitMessage)(nil), // 5: abbapb.RoundInitMessage
	(*RoundAuxMessage)(nil),  // 6: abbapb.RoundAuxMessage
	(*RoundConfMessage)(nil), // 7: abbapb.RoundConfMessage
	(*RoundCoinMessage)(nil), // 8: abbapb.RoundCoinMessage
}
var file_abbapb_roundpb_proto_depIdxs = []int32{
	1, // 0: abbapb.RoundEvent.input_value:type_name -> abbapb.RoundInputValue
	2, // 1: abbapb.RoundEvent.deliver:type_name -> abbapb.RoundDeliver
	3, // 2: abbapb.RoundEvent.finish:type_name -> abbapb.RoundFinishAll
	5, // 3: abbapb.RoundMessage.init:type_name -> abbapb.RoundInitMessage
	6, // 4: abbapb.RoundMessage.aux:type_name -> abbapb.RoundAuxMessage
	7, // 5: abbapb.RoundMessage.conf:type_name -> abbapb.RoundConfMessage
	8, // 6: abbapb.RoundMessage.coin:type_name -> abbapb.RoundCoinMessage
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_abbapb_roundpb_proto_init() }
func file_abbapb_roundpb_proto_init() {
	if File_abbapb_roundpb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_abbapb_roundpb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_abbapb_roundpb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundInputValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_abbapb_roundpb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundDeliver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_abbapb_roundpb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundFinishAll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_abbapb_roundpb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_abbapb_roundpb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundInitMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_abbapb_roundpb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundAuxMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_abbapb_roundpb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundConfMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_abbapb_roundpb_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundCoinMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_abbapb_roundpb_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*RoundEvent_InputValue)(nil),
		(*RoundEvent_Deliver)(nil),
		(*RoundEvent_Finish)(nil),
	}
	file_abbapb_roundpb_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*RoundMessage_Init)(nil),
		(*RoundMessage_Aux)(nil),
		(*RoundMessage_Conf)(nil),
		(*RoundMessage_Coin)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_abbapb_roundpb_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_abbapb_roundpb_proto_goTypes,
		DependencyIndexes: file_abbapb_roundpb_proto_depIdxs,
		MessageInfos:      file_abbapb_roundpb_proto_msgTypes,
	}.Build()
	File_abbapb_roundpb_proto = out.File
	file_abbapb_roundpb_proto_rawDesc = nil
	file_abbapb_roundpb_proto_goTypes = nil
	file_abbapb_roundpb_proto_depIdxs = nil
}
